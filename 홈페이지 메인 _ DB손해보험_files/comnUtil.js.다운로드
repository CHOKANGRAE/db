var headerStr = {
	"screenId" : "screenId"
};

function getBrowser(){
    var ua = navigator.userAgent.toLowerCase();
    var browser = "";

    if (ua.indexOf("msie") > -1 || ua.indexOf("trident") > -1){
        browser = "ie";
    }else if (ua.indexOf("opr") > -1){
        browser = "opera";
    }else if (ua.indexOf("firefox") > -1){
        browser = "firefox";
    }else if (ua.indexOf("chrome") > -1){
        browser = "chrome";
    }else if (ua.indexOf("safari") > -1){
        browser = "safari";
    }else {
        browser = "unknown";
    }
    return browser;
}

/**
 * 숫자만 numOnly
 */
$(document).on("keyup", "input[numOnly]", function() { $(this).val( $(this).val().replace(/[^0-9]/gi, "") ); });
//$(document).on("blur", "input[numOnly]", function() { $(this).val( $(this).val().replace(/[^0-9]/gi, "") ); });
$(document).on("blur", "input[numOnly]", function() { 
	$(this).val( $(this).val().replace(/[^0-9]/gi, "") );
	
	if("ie" == getBrowser() && $(this).attr('dateDot') != undefined && $(this).val() != '') {
		var $this = $(this);
		setTimeout(function(){
			$this.change();
		}, 10);
	}
});


/**
 * 한글만 korOnly
 */
//$(document).on("keyup", "input[korOnly]", function() { $(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣]/gi, "") ); });
//$(document).on("blur", "input[korOnly]", function() { $(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣]/gi, "") ); });
$(document).on("keyup", "input[korOnly]", function() {
	if("ie" != getBrowser()) {
    	$(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣]/gi, "") );
    }
});

$(document).on("keypress", "input[korOnly]", function() {
	if("ie" == getBrowser()) {
        $(this).val($(this).val().replace(/[a-z0-9]|[\[\]{}()<>?|'~!@#$%^&*-_+=,.;:\"'\\]/g, ""));
//		$(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣]/gi, "") );
    }
});


/**
 * 영어만 engOnly
 */
$(document).on("keyup", "input[engOnly]", function() { $(this).val( $(this).val().replace(/[^a-z|A-Z]/gi, "") ); });
$(document).on("blur", "input[engOnly]", function() { $(this).val( $(this).val().replace(/[^a-z|A-Z]/gi, "") ); });


/**
 * 숫자 + '.' numDot
 */
$(document).on("keyup", "input[numDot]", function() { $(this).val( $(this).val().replace(/[^.0-9]/gi, "") ); });
//$(document).on("blur", "input[numDot]", function() { $(this).val( $(this).val().replace(/[^.0-9]/gi, "") ); });


/**
 * 숫자 + 한글 numKor
 */
$(document).on("keyup", "input[numKor]", function() { $(this).val( $(this).val().replace(/[^0-9|ㄱ-ㅎ|가-힣]/gi, "") ); });
//$(document).on("blur", "input[numKor]", function() { $(this).val( $(this).val().replace(/[^0-9|ㄱ-ㅎ|가-힣]/gi, "") ); });


/**
 * 숫자 + 한글 + 공백 numKorSpe
 */
//$(document).on("blur", "input[numKorSpe]", function() { $(this).val( $(this).val().replace(/[^0-9|ㄱ-ㅎ|가-힣\s]/gi, "") ); });
$(document).on("keyup", "input[numKorSpe]", function(e) {
	if("ie" != getBrowser()) {
		$(this).val( $(this).val().replace(/[^0-9|ㄱ-ㅎ|가-힣\s]/gi, "") );
	}
});

$(document).on("keypress", "input[numKorSpe]", function() {
	if("ie" == getBrowser()) {
        $(this).val($(this).val().replace(/[\[\]{}()<>?|'~!@#$%^&*-_+=,.;:\"'\\]/g, ""));
    }
});


/**
 * 영어 + 한글 engKor  
 */
//$(document).on("keyup", "input[engKor]", function() { $(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣|a-z|A-Z]/gi, "") ); });
//$(document).on("blur", "input[engKor]", function() { $(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣|a-z|A-Z]/gi, "") ); });
$(document).on("keyup", "input[engKor]", function() {
	if("ie" != getBrowser()) {
    	$(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣|a-z|A-Z]/gi, "") );
    }
});

$(document).on("keypress", "input[engKor]", function() {
	if("ie" == getBrowser()) {
        $(this).val($(this).val().replace(/[0-9]|[\[\]{}()<>?|'~!@#$%^&*-_+=,.;:\"'\\]/g, ""));
//		$(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣]/gi, "") );
    }
});



/**
 * 영어 + 숫자 numEng
 */
$(document).on("keyup", "input[numEng]", function() { $(this).val( $(this).val().replace(/[^0-9|a-z|A-Z]/gi, "") ); });
$(document).on("blur", "input[numEng]", function() { $(this).val( $(this).val().replace(/[^0-9|a-z|A-Z]/gi, "") ); });


/**
 * 영어 + 한글 + 숫자 engKorNum
 */
//$(document).on("blur", "input[engKorNum]", function() { $(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣|a-z|A-Z|0-9]/gi, "") ); });
$(document).on("keyup", "input[engKorNum]", function() {
	if("ie" != getBrowser()) {
		$(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣|a-z|A-Z|0-9]/gi, "") );
	}
});

$(document).on("keypress", "input[engKorNum]", function() {
	if("ie" == getBrowser()) {
        $(this).val($(this).val().replace(/[\[\]{}()<>?|'~!@#$%^&*-_+=,.;:\ \"'\\]/g, ""));
    }
});


/**
 * 영어 + 한글 + 숫자 + 하이픈(-) engKorNumHpn
 */
//$(document).on("blur", "input[engKorNumHpn]", function() { $(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣|a-z|A-Z|0-9\-]/gi, "") ); });
$(document).on("keyup", "input[engKorNumHpn]", function() {
	if("ie" != getBrowser()) {
		$(this).val( $(this).val().replace(/[^ㄱ-ㅎ|가-힣|a-z|A-Z|0-9\-]/gi, "") );
	}
});

$(document).on("keypress", "input[engKorNumHpn]", function() {
	if("ie" == getBrowser()) {
        $(this).val($(this).val().replace(/[\[\]{}()<>?|'~!@#$%^&*_+=,.;:\ \"'\\]/g, ""));
    }
});

/**
 * email @ 기준 앞자리
 */
$(document).on("keyup", "input[emailPre]", function() { $(this).val( $(this).val().replace(/[^a-z|A-Z|0-9\-\_\.]/gi, "") ); });
$(document).on("blur", "input[emailPre]", function() { $(this).val( $(this).val().replace(/[^a-z|A-Z|0-9\-\_\.]/gi, "") ); });

/**
 * 날짜 포맷 dateDot
 * format : yyyy.mm.dd
 * foucs 시 포맷 제거
 * blur  시 포맷 적용
 */
$(document).on("focus", "input[dateDot]", function() { $(this).val( $(this).val().replace(/[^\d]+/g, "") ); });
$(document).on("blur", "input[dateDot]", function() { $(this).val( $(this).val().replace(/(\d{4})(\d{2})(\d{2})/g, '$1.$2.$3') );});

$(document).on("focus", "input[dateDot2]", function() { $(this).val( $(this).val().replace(/[^\d]+/g, "") ); });
$(document).on("blur", "input[dateDot2]", function() {
	$(this).val($(this).val().replace(/[^0-9]/gi, ""));

	if( $(this).val() != '' ) {
		$(this).val( $(this).val().replace(/(\d{4})(\d{2})(\d{2})/g, '$1.$2.$3') );
		var regExp = /^(19|20)\d{2}.(0[1-9]|1[012]).(0[1-9]|[12][0-9]|3[0-1])$/;
		if (!regExp.test($(this).val()) ) {
	    	LayerPop.alert("날짜를 확인해 주세요.");
			$(this).val('');
			$(this).focus();
			return false;
		}
	}
});


/**
 * 금액 포맷 amtCom
 * format : #,###,###
 * 4자리 입력 시 마다 콤마
 */
$(document).on("input", "input[amtCom]", function() { $(this).val( ($(this).val().replace(/[^\d]+/g, "")).replace(/(\d)(?=(?:\d{3})+(?!\d))/g, '$1,') ); });


/**
 * 용  도 : jqueryString ==> json변환
 * @param	String
 * @return	obj
 */
jQuery.fn.serializeObject = function() {
	var obj = null;
	try {
		if (this[0].tagName && this[0].tagName.toUpperCase() == "FORM") {
			var arr = this.serializeArray();
			if (arr) {
				obj = {};
				jQuery.each(arr, function() {
					obj[this.name] = this.value;
				});
			}
		}
	} catch (e) {
		//console.log(e.message);
	}
	return obj;
}

jQuery.fn.serializeObjectNew = function() {
	var result = {},
		elementMapper = function(element) {
//			element.name = $.camelCase(element.name);
			return element;
		},
		appendToResult = function(i, element) {
			var node = result[element.name];
			if ('undefined' !== typeof node && node !== null) {
				if( $.isArray(node) ){
					node.push(element.value);
				}else{
					result[element.name] = [node, element.value];
				}
//				o[element.name] = $.isArray(node) ? node.push(element.value) : [node, element.value];
			} else {
				result[element.name] = element.value;
			}
		};
	$.each($.map(this.serializeArray(), elementMapper), appendToResult);
	return result;
};



//trim 
function trim(str) {
	return str.replace(/(^\s*)|(\s*$)/gi, "");
}

//replacdAll("aa-bb-123", "-", ""); -> aabb123
function replaceAll(str, sStr, rStr) {
	if (isNull(str)) {
		return "";
	}
	return str.split(sStr).join(rStr);
}

//자동 포커스 이동여부:일부 화면에서는 업무적으로 적용되면 안 됨.
//var gIsInvokeAutoFocus = true;

/**
 * 용  도 : 화면상 기본 동작 등록
 * @return   

 $(document).ready(function() {
 if(!gIsInvokeAutoFocus) return;

 //확인 버튼 기본 disable 처리
 if(0 != $(".fixed_bot .btn_confirm").length) {
 if(0 < $("*[data-required='true']").length) {
 $(".fixed_bot .btn_confirm").removeClass("active").prop("disabled", true);
 }
 }

 scanInvokeElement();

 $("#layout .popup .text_hidden").on("click", function() {
 changeConfirmBtn("PopupClose");
 });
 });
 */

/**
 * @param url
 * @returns
 */
//APP는 system으로 띄움 IOS ,Android 공통 url 호출 function
function openUrl(url) {
	if (_isDevice == "A") {
		window.open(url, "_system");
	} else {
		window.open(url, "_blank");
	}
}
/**
 * 
 * @param url
 * @param opt
 * @returns
 */
function openUrlOpt(url, opt) {
	if (_isDevice == "A") {
		window.open(url, "_system", opt);
	} else {
		window.open(url, "_blank", opt);
	}
}

// 페이지 이동 (같은창)
function openPage(url) {
	location.href = url;
}

/**
 * 용  도 : 팝업
 * 사용예제:  popOpenWin(팝업창URL, PC일때팝업옵션, 모바일일때스크롤유무, 모바일일때콜백함수) 
 * 			-->  popOpenWin("/ml/CCPML10P01.do", "status=no,toolbar=no,menubar=no,location=no,scrollbars=yes", "Y", fn_recall);
 * 			
 * @param    String
 * @return   String
 */
function popOpenWin(popUrl, popOpt) {
	if (_isDevice == "A") {
		exWNExtPopup(popUrl);
	} else {
		if(popOpt != undefined || popOpt == ""){
			window.open(popUrl, "_blank")			
		}else{
			window.open(popUrl, "_blank", popOpt);
		}
		
	}
}
/**
 * 용  도 : 팝업 close
 * 사용예제: 
 * var data = {};
 * data['key1'] = "value1";
 * data['key2'] = "value2";
 * @param    String
 * @return   String
 */
function popCloseWin(data) {
	window.close();
}

function URLEncodeData(data) {
	if (!data)
		return "";
	return encodeURIComponent(data);
}

/**
 * 용  도 : Ajax호출을 간단하게 호출하기 위한 function
 * 사용예제:  callAjax("#listForm","/pc/fndChg/test.do");//Ajax데이터 조회후 callback(data){} 함수만들어서 사용하면 됨.
 * callbackErrFun - 에러콜백, callbackFun - callback 파라미터 추가
 * @param    String
 * @return    String
 */
function callAjax(formId, url, callbackErrFun, callbackFun, screenId, callbackAsync) {
	
	var inputParams = {};
	var paramsStr;

	if ("" == isNullRE(callbackAsync)) {
		callbackAsync = true;
	}

	paramsStr = JSON.stringify($(formId).serializeObject());

	//console.log("inputParams  ======== "+ paramsStr);
	//console.log("inputParams replace ======== "+ paramsStr.replace(/\\/gi,""));

	$.ajax({
		type : 'post',
		url : _contextPath + url,
		data : paramsStr,
		dataType : 'json',
		async : callbackAsync,
		contentType : 'application/json; charset=utf-8',
		beforeSend : function() {
			// $util.loading.show();
			$.session.ajaxExtend();
			Loading.open();
		},
		complete : function() {			
		},
		error : function(data) {
			Loading.close();
			if (typeof (callbackErrFun) == "undefined"
					|| callbackErrFun == "") {
				LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
				});
			} else {
				callbackErrFun(data);
			}
		},
		success : function(data) {
			Loading.close();
			if (typeof (callbackFun) == "undefined"
					|| callbackFun == "") {
				callback(data);
			} else {
				if (data != undefined && data.errMsg != undefined) {
					console.log(data.errMsg);
					
					msg = "정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.";
					isTimeCheck = false;	//이용시간체크 에러 여부
					isDuplicate = false;	//중복로그인 에러 여부
					if ( data.errMsg.rspnCd != undefined ) {
						if ( data.errMsg.rspnCd == "-1000" ) {
							isTimeCheck = true;
						} else if ( data.errMsg.rspnCd == "88887" ) {
							isDuplicate = true;
						} else if ( data.errMsg.rspnCd == "-997" ) {
							isTimeCheck = true;
						}
						msg = data.errMsg.rspnMsgCtnt;
					}
					
					LayerPop.alert(msg, function() {
						if ( isTimeCheck || isDuplicate ) {
							//업무별 이용가능시간 에러
							location.href = "/main.do";
						}
					});
				} else {
					callbackFun(data);
				}
			}
		}
	});
}

/**
 * 용  도 : Ajax호출 Form없이 parameter 로 던지기
 * 사용예제: callAjaxParams(params, "/cmm/basic/selectItemAjaxList.do", fnErrCallBack, fnCallBack);
 * var params = {
 "searchCondition" : $("#searchCondition").val(),
 "searchKeyword"   : $("#searchKeyword").val()
 };	
 * @param    String
 * @return    String
 */
function callAjaxParams(params, url, callbackErrFun, callbackFun, screenId, callbackAsync) {
	var inputParams = {};
	var paramsStr;
	
	if (isNull(params)) params = {};

	paramsStr = JSON.stringify(params);

	if ("" == isNullRE(callbackAsync)) {
		callbackAsync = true;
	}

	//console.log("paramsStr ======== "+ paramsStr);

	$.ajax({
		type : 'post',
		url : _contextPath + url,
		data : paramsStr,
		dataType : 'json',
		async : callbackAsync,
		contentType : 'application/json; charset=utf-8',
		beforeSend : function() {
			$.session.ajaxExtend();
			Loading.open();
		},
		complete : function() {			
		},
		error : function(data) {
			Loading.close();
			if (typeof (callbackErrFun) == "undefined"
					|| callbackErrFun == "") {
				LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
				});
			} else {
				callbackErrFun(data);
			}
		},
		success : function(data) {
			Loading.close();
			if (typeof (callbackFun) == "undefined"
					|| callbackFun == "") {
				callback(data);
			} else {
				if (data != undefined && data.errMsg != undefined) {
					console.log(data.errMsg);
					
					msg = "정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.";
					isTimeCheck = false;	//이용시간체크 에러 여부
					isDuplicate = false;	//중복록인 에러 여부
					if ( data.errMsg.rspnCd != undefined ) {
						msg = data.errMsg.rspnMsgCtnt;
						if ( data.errMsg.rspnCd == "-1000" ) {
							isTimeCheck = true;
						} else if ( data.errMsg.rspnCd == "88887" ) {
							isDuplicate = true;
						} else if ( data.errMsg.rspnCd == "-997" ) {
							isTimeCheck = true;
						}
					}
					
					LayerPop.alert(msg, function() {
						if ( isTimeCheck || isDuplicate ) {
							//업무별 이용가능시간 에러
							location.href = "/main.do";
						}
					});
				} else {
					callbackFun(data);
				}
			}
		}
	});
}


/**
 * 용  도 : Ajax호출 Form없이 parameter 로 던지기 - server 에서 request.getParameter("aa") 로 쓰기위해. - vo(@ModelAttribute) + request    
 * 사용예제: callAjaxParams(params, "/cmm/basic/selectItemAjaxList.do", fnErrCallBack, fnCallBack);
 * var params = {
 "searchCondition" : $("#searchCondition").val(),
 "searchKeyword"   : $("#searchKeyword").val()
 };	
 * @param    String
 * @return    String
 */
function callAjaxParams2(params, url, callbackErrFun, callbackFun, screenId) {	
	//paramsStr = JSON.stringify(params);
	
	params.screenId = screenId;
	
	$.ajax({
		type : 'post',
		url : _contextPath + url,
		data : params,
		dataType : 'json',
		async : true,
		//contentType : 'application/json; charset=utf-8',
		beforeSend : function() {
			$.session.ajaxExtend();
			Loading.open();
		},
		complete : function() {			
		},
		error : function(data) {
			Loading.close();
			if (typeof (callbackErrFun) == "undefined" || callbackErrFun == "") {
				LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
				});
			} else {
				callbackErrFun(data);
			}
		},
		success : function(data) {
			Loading.close();
			if (typeof (callbackFun) == "undefined" || callbackFun == "") {
				callback(data);
			} else {
				if (data != undefined && data.errMsg != undefined) {
					console.log(data.errMsg);
					
					msg = "정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.";
					isTimeCheck = false;	//이용시간체크 에러 여부
					isDuplicate = false;	//중복록인 에러 여부
					if ( data.errMsg.rspnCd != undefined ) {
						msg = data.errMsg.rspnMsgCtnt;
						if ( data.errMsg.rspnCd == "-1000" ) {
							isTimeCheck = true;
						} else if ( data.errMsg.rspnCd == "88887" ) {
							isDuplicate = true;
						} else if ( data.errMsg.rspnCd == "-997" ) {
							isTimeCheck = true;
						}
					}
					
					LayerPop.alert(msg, function() {
						if ( isTimeCheck || isDuplicate ) {
							//업무별 이용가능시간 에러
							location.href = "/main.do";
						}
					});
				} else {
					callbackFun(data);
				}
			}
		}
	});
}


/**
 * Ajax 동적 html 로딩
 * 
 * @param formId
 * @param url
 * @param callbackErrFun
 * @param callbackFun
 * @param screenId
 * @returns
 */
function callAjaxRcvHtml(formId, url, callbackErrFun, callbackFun, screenId, arrInputId) {
	//var inputParams = {};
	//var paramsStr ;

	//paramsStr = JSON.stringify($(formId).serializeObject());

	var paramStr = $(formId).serialize();

	if ( "" != isNullRE(arrInputId) ) {
		$.each(arrInputId, function(i,v) {
	        var encData = mtk.inputFillEncData(document.getElementById(v));
	        var hidden = encData.hidden;
	        var hmac = encData.hmac;
	        var name = document.getElementById(v).name;
	        paramStr += '&' + name + 'Hidden=' + hidden; 
	        paramStr += '&' + name + 'Hmac=' + hmac;
	    });
	    
	    var transkeyParam = "";
	    
	    if("undefined" != typeof mtk && null != mtk && "" != mtk) {
	        transkeyParam = '&transkeyUuid=' + mtk.transkeyUuid;
	    }

	    paramStr += '&' + transkeyParam + "&screenId="+screenId
	}

	Loading.open();
	$.post(url, paramStr, function(data, status) {
		
	}).done(function(data) {
		Loading.close();
		if (typeof (callbackFun) == "undefined" || callbackFun == "") {
			callback(data);
		} else {
			if (data != undefined && data == "-99999") {
				///console.log(data.errMsg);
				//LayerPop.alert(data.errMsg.rspnMsgCtnt, function() {
				//});
				//로그인 필요페이지. 로그인페이지로 이동.
				
			} else {
				callbackFun(data);
			}
		}

	}).fail(function(data) {
		if (typeof (callbackErrFun) == "undefined" || callbackErrFun == "") {
			LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
			});
		} else {
			callbackErrFun(data);
		}

	}).always(function(data) {

	});
}

/**
 * 용  도 : Ajax File Upload 처리
 * 사용예제: callAjaxFileUpload(formData, "/file/uploadAjax.do", "", fnCallBack, true);
 * 
 *          var formData = new FormData($("#fileForm")[0]);
 * 
 *          var formData = new FormData();
                formData.append('RC0001', $("input:file")[0].files[0]); //key, value append
                formData.append('RC0002', $("input:file")[1].files[0]); //key, value append
    
 * @param   String
 * @return  String
 */
function callAjaxFileUpload(formData, url, callbackErrFun, callbackFun, callBackAsync) {

	$.ajax({
		type : 'post',
		url : _contextPath + url,
		data : formData,
		processData : false,
		contentType : false,
		async: callBackAsync,
		beforeSend : function() {
			$.session.ajaxExtend();
			Loading.open();
		},
		complete : function() {
		},
		error : function(data) {
			Loading.close();
			if (typeof (callbackErrFun) == "undefined"
					|| callbackErrFun == "") {
				LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
				});
			} else {
				callbackErrFun(data);
			}
		},
		success : function(data) {
			Loading.close();
			if (typeof (callbackFun) == "undefined"
					|| callbackFun == "") {
				callback(data);
			} else {
				if (data != undefined && data.errMsg != undefined) {
					console.log(data.errMsg);
					
					msg = "정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.";
					isTimeCheck = false;	//이용시간체크 에러 여부
					isDuplicate = false;	//중복록인 에러 여부
					if ( data.errMsg.rspnCd != undefined ) {
						msg = data.errMsg.rspnMsgCtnt;
						if ( data.errMsg.rspnCd == "-1000" ) {
							isTimeCheck = true;
						} else if ( data.errMsg.rspnCd == "88887" ) {
							isDuplicate = true;
						} else if ( data.errMsg.rspnCd == "-997" ) {
							isTimeCheck = true;
						}
					}
					
					//로그인 정보가 없습니다.
					LayerPop.alert(msg, function() {
						if ( isTimeCheck || isDuplicate ) {
							//업무별 이용가능시간 에러
							location.href = "/main.do";
						}
					});
				} else {
					callbackFun(data);
				}
			}
		}
	});
}

/**
 * 용  도 : PC용 - Ajax 가상키보드 입력 후 요청
 * 사용예제: callAjaxTranskey(formId, "pwdId", "/cmm/basic/selectItemAjaxList.do", fnErrCallBack, fnCallBack, screenId);
 * 
 * @param    String
 * @return    String
 */
function callAjaxTranskey(formId, url, callbackErrFun, callbackFun, screenId) {

	var arrName = [];
	var paramStr = $('#' + formId).serialize();

	$.ajax({
		type : 'post',
		url : _contextPath + url,
		data : paramStr,
		contentType : 'application/x-www-form-urlencoded',
		Cache : false,
		beforeSend : function() {
			$.session.ajaxExtend();
			Loading.open();
		},
		complete : function() {
			
		},
		error : function(data) {
			Loading.close();
			if (typeof (callbackErrFun) == "undefined"
					|| callbackErrFun == "") {
				LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
				});
			} else {
				callbackErrFun(data);
			}
		},
		success : function(data) {
			Loading.close();
			data = JSON.parse(data);
			if (typeof (callbackFun) == "undefined"
					|| callbackFun == "") {
				callback(data);
			} else {
				if (data != undefined && data.errMsg != undefined) {
					console.log(data.errMsg);
					
					msg = "정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.";
					isTimeCheck = false;	//이용시간체크 에러 여부
					isDuplicate = false;	//중복록인 에러 여부
					if ( data.errMsg.rspnCd != undefined ) {
						msg = data.errMsg.rspnMsgCtnt;
						if ( data.errMsg.rspnCd == "-1000" ) {
							isTimeCheck = true;
						} else if ( data.errMsg.rspnCd == "88887" ) {
							isDuplicate = true;
						} else if ( data.errMsg.rspnCd == "-997" ) {
							isTimeCheck = true;
						}
					}
					
					LayerPop.alert(msg, function() {
						if ( isTimeCheck || isDuplicate ) {
							//업무별 이용가능시간 에러
							location.href = "/main.do";
						}
					});
				} else {
					callbackFun(data);
				}
			}
		}
	});
}


/**
 * 용  도 : Ajax 모바일 가상키패드 입력 후 요청
 * 사용예제: callAjaxMTranskey("pwdForm", ['curPwd','newPwd','newPwdCnfm'], "/FWMAIV0001_01_AX.do", fnErrCallBack, fnCallBack, "FWMAIV0001");;
 * 
 * @param    String
 * @return    String
 */ 
function callAjaxMTranskey(formId, arrInputId, url, callbackErrFun, callbackFun, screenId){
    
    var arrName = [];
    var paramStr = $('#' + formId).serialize();
    
    $.each(arrInputId, function(i,v) {
        var encData = mtk.inputFillEncData(document.getElementById(v));
        var hidden = encData.hidden;
        var hmac = encData.hmac;
        var name = document.getElementById(v).name;
        paramStr += '&' + name + 'Hidden=' + hidden; 
        paramStr += '&' + name + 'Hmac=' + hmac;
    });
    
    var transkeyParam = "";
    
    if("undefined" != typeof mtk && null != mtk && "" != mtk) {
        transkeyParam = '&transkeyUuid=' + mtk.transkeyUuid;
    }

    paramStr += '&' + transkeyParam + "&screenId="+screenId
    
    $.ajax({
        type        : 'post',
        url         :  _contextPath + url ,
        data        : paramStr ,
        contentType:'application/x-www-form-urlencoded',
        Cache: false,
        beforeSend  : function(){
        	$.session.ajaxExtend();
        	Loading.open();
        },
        complete    : function(){
        	
        },          
        error       : function(data) {
        	Loading.close();
            if( typeof( callbackErrFun ) == "undefined"  || callbackErrFun == ""){
                LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
				});
            }else{
                callbackErrFun(data);
            }
        },
        success     : function (data) {
        	Loading.close();
        	data = JSON.parse(data);
            if( typeof( callbackFun ) == "undefined" || callbackFun == ""){
                callback(data);
            }else{
            	if (data != undefined && data.errMsg != undefined) {					
                    console.log(data);
                    
                    msg = "정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.";
					isTimeCheck = false;	//이용시간체크 에러 여부
					isDuplicate = false;	//중복록인 에러 여부
					if ( data.errMsg.rspnCd != undefined ) {
						msg = data.errMsg.rspnMsgCtnt;
						if ( data.errMsg.rspnCd == "-1000" ) {
							isTimeCheck = true;
						} else if ( data.errMsg.rspnCd == "88887" ) {
							isDuplicate = true;
						} else if ( data.errMsg.rspnCd == "-997" ) {
							isTimeCheck = true;
						}
					}
					
					LayerPop.alert(msg, function() {
						if ( isTimeCheck || isDuplicate ) {
							//업무별 이용가능시간 에러
							location.href = "/main.do";
						}
					});
                }else{
                    callbackFun(data);
                }
            }
        }
    }); 
    
};


/**
 * 용  도 :  Ajax sign 전자서명 
 * 사용예제: callAjaxform(formId, "/selectItemAjaxList.do", fnErrCallBack, fnCallBack, screenId);
 * 
 * @param    String
 * @return    String
 */
function callAjaxform(formId, url, callbackErrFun, callbackFun, screenId) {

	var paramStr = $('#' + formId).serialize();

	$.ajax({
		type : 'post',
		url : _contextPath + url,
		data : paramStr,
		//contentType : 'application/x-www-form-urlencoded',
		Cache : false,
		beforeSend : function() {
			$.session.ajaxExtend();
			Loading.open();
		},
		complete : function() {
			
		},
		error : function(data) {
			Loading.close();
			if (typeof (callbackErrFun) == "undefined"
					|| callbackErrFun == "") {
				LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
				});
			} else {
				callbackErrFun(data);
			}
		},
		success : function(data) {
			Loading.close();
			data = JSON.parse(data);
			if (typeof (callbackFun) == "undefined"
					|| callbackFun == "") {
				callback(data);
			} else {
				if (data != undefined && data.errMsg != undefined) {
					console.log(data.errMsg);
					
					msg = "정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.";
					isTimeCheck = false;	//이용시간체크 에러 여부
					isDuplicate = false;	//중복록인 에러 여부
					if ( data.errMsg.rspnCd != undefined ) {
						msg = data.errMsg.rspnMsgCtnt;
						if ( data.errMsg.rspnCd == "-1000" ) {
							isTimeCheck = true;
						} else if ( data.errMsg.rspnCd == "88887" ) {
							isDuplicate = true;
						} else if ( data.errMsg.rspnCd == "-997" ) {
							isTimeCheck = true;
						}
					}
					
					LayerPop.alert(msg, function() {
						if ( isTimeCheck || isDuplicate ) {
							//업무별 이용가능시간 에러
							location.href = "/main.do";
						}
					});
				} else {
					callbackFun(data);
				}
			}
		}
	});
}


/**
 * 용  도 : 숫자만 입력가능하게 체크, 숫자 입력할때 포커스 이동시 ###,### 형태로 바꿔준다.
 * @param	String
 * @return	String
 */
function fnc_refdPrcpCheck(obj) {
	var checkVal = obj.value.split(",").join("");
	if (checkVal == "")
		return false;
	var regExp = /^[0-9]+$/;
	if (!regExp.test(checkVal)) {
		obj.value = "";
		LayerPop.alert("숫자만 입력하세요.", function() {
			obj.value = "";
			obj.focus();
		});
		return false;
	}else{
		obj.value = formatCommaStr(checkVal);
		return true;
	}
}

/**
 * 용  도 : 숫자만 입력가능하게 체크.
 * @param	String
 * @return	String
 */
function fnc_refdCheck(obj) {
	var checkVal = obj.value.split(",").join("");
	if (checkVal == "")
		return false;
	var regExp = /^[0-9]+$/;
	if (!regExp.test(checkVal)) {
		obj.value = "";
		LayerPop.alert("숫자만 입력하세요.", function() {
			obj.value = "";
			obj.focus();
		});
		return false;
	} else {
		return true;
	}
}

/**
 * 용  도 : 금액 유효성 체크
 * @param	obj
 * @return    
 */
function validateAmt(obj) {
	if (fnc_refdPrcpCheck(obj)) {
		if (isNull(removeComma($(obj).val())) || !isNumber(removeComma($(obj).val()))
				|| nullStrToZero(removeComma($(obj).val())) < 1) {
			LayerPop.alert("금액이 유효하지 않습니다.", function() {
				$(obj).val("");
				$(obj).focus();
			});
			return false;
		} else {
			return true;
		}
	} else {
		return false;
	}

}

/**
 * 용  도 : 숫자 입력할때 포커스 이동시 ###,### 형태로 바꿔준다.
 * null 이거나 공백일경우 그대로 리턴
 * @param    String
 * @return    String
 */
function formatCommaStrSpace(str) {
	if(nullStrToZero(str) == 0){
		return "0";
	}else if (!isNull(str)) {
		return formatCommaStr(str);
	} else {
		return "";
	}
}

/**
 * 용  도 : 숫자 입력할때 포커스 이동시 ###,### 형태로 바꿔준다.
 * @param	String
 * @return String
 */
function formatCommaStr(str) {
	if (str != '' && str != null) {
		if (typeof (str) == "string")
			str = String(Number(str));
		else if (typeof (str) == "number")
			str = String(str);
		else
			return str;
		var money = str.replace(/,/gi, "");
		var txtNumber = '' + money;
		if ((money.indexOf(',') == -1) && (money != '')) {
			var rxSplit = new RegExp('([0-9])([0-9][0-9][0-9][,.])');
			var arrNumber = txtNumber.split('.');
			arrNumber[0] += '.';
			do {
				arrNumber[0] = arrNumber[0].replace(rxSplit, '$1,$2');
			} while (rxSplit.test(arrNumber[0]));
			if (arrNumber.length > 1)
				return (reStr = arrNumber.join(''));
			else
				return (reStr = arrNumber[0].split('.')[0]);
		}
	} else {
		return "0";
	}
}

/**
 * 용  도 : 숫자 입력할때 ###,### 형태로 바꿔준다.
 * @param	object
 * @return
 */
function formatComma(obj) {
	var money = obj.value.replace(/,/gi, "");
	var txtNumber = '' + money;
	if ((money.indexOf(',') == -1) && (money != '')) {
		var rxSplit = new RegExp('([0-9])([0-9][0-9][0-9][,.])');
		var arrNumber = txtNumber.split('.');
		arrNumber[0] += '.';
		do {
			arrNumber[0] = arrNumber[0].replace(rxSplit, '$1,$2');
		} while (rxSplit.test(arrNumber[0]));
		if (arrNumber.length > 1)
			obj.value = arrNumber.join('');
		else
			obj.value = arrNumber[0].split('.')[0];
	}
}

function removeComma(obj) {
	if (typeof obj == "string") {
		return obj.split(",").join("");
	} else {
		if (obj.value.length > 0) {
			obj.value = obj.value.split(",").join("")
		} else {
			obj.value = "";
		}
	}
}

/**
 * 용   도 : BYTE로 문자길이를 자른다.
 * 사용예 : strByte( str, 10 )
 * @param str 원본
 * @param len 자를 길이
 */
function strByte(str, len) {

	var l = 0;
	for (var i = 0; i < str.length; i++) {
		l += (str.charCodeAt(i) > 128) ? 2 : 1;
		if (l > len)
			return str.substring(0, i) + "..";
	}

	return str;
}

function strByte2(str, len) {

	var l = 0;
	for (var i = 0; i < str.length; i++) {
		l += (str.charCodeAt(i) > 128) ? 2 : 1;
		if (l > len)
			return str.substring(0, i);
	}

	return str;
}

function onblurJumin(obj) {
	s = (obj.value).replace(/-|\//g, "");
	if (s == "")
		return;
	if (s.length == 13) {
		if (!isJuminNo(s.substring(0, 6), s.substring(6, 13))) {
			LayerPop.alert("주민번호가 유효 하지 않습니다.\n확인후 다시 입력해주세요.");
			obj.focus();
			return;
		}
	} else {
		LayerPop.alert("주민번호가 유효 하지 않습니다.\n확인후 다시 입력해주세요.");
		obj.focus();
		return;
	}
}

/**
 * 용   도 : 입력받은 값이 null 인지 체크. "" 리턴
 * if("" == isNullRE(str)){console.log("널,빈값")}
 * @param obj
 * @return boolean
 */
function isNullRE(obj) {
	if (typeof obj === "object" && obj == null) {
		return "";
	}

	if (typeof obj === "undefined") {
		return "";
	}

	if (obj) {
		return obj;
	} else {
		return "";
	}
}

/**
 * 용   도 : 입력받은 값이 null 인지 체크한다.
 * @param obj
 * @return boolean
 */
function isNull(obj) {
	if (typeof obj === "undefined" || obj == null || obj == "") {
		return true;
	}
	return false;
}

/**
 * obj가 Null 일때 '0' 으로 치환 
 * @param obj
 * @returns {obj}
 */
function nullToZero(obj) {
	if (isNull(obj)) {
		return "0";
	}
	return obj;
}

/**
 * null 이거나 문자열일때 숫자 0 으로 치환
 * @param obj
 * @returns
 */
function nullStrToZero(obj) {
	if (isNull(obj) || !isNumber(obj)) {
		return 0;
	} else {
		return Number(obj);
	}
}

/**
 * String이 undefined,Null,'' 일때 '' 으로 치환 
 * @param String
 * @returns String
 */
function nullToString(str) {
	if (typeof (str) != "undefined" && str != "" && str != null) {
		return str;
	} else {
		return "";
	}
}

/**
 * String이 undefined,Null,'' 일때 false 으로 return 
 * @param String
 * @returns boolean
 */
function isEmpty(str) {
	var result = true;
	if (str == null || str == '') {
		result = false;
	}
	return result;
}

/**
 * String이 Null,'' 일때 '' 으로 치환 
 * @param String
 * @returns String
 */
function nullToEmpty(str) {
	if (str == null || str == '') {
		result = "";
	} else {
		result = str;
	}
	return result;
}

/**
 * 용   도 : 입력받은 값의 길이를 리턴한다. 한글 2Byte 한글이외 1Byte
 * @param obj
 * @return
 */
function getByteLength(obj) {
	var byteLength = 0;
	for (var inx = 0; inx < obj.length; inx++) {
		var oneChar = escape(obj.charAt(inx));
		if (oneChar.length == 1) {
			byteLength++;
		} else if (oneChar.indexOf("%u") != -1) {
			byteLength += 2;
		} else if (oneChar.indexOf("%") != -1) {
			byteLength += oneChar.length / 3;
		}
	}
	return byteLength;
}

/**
 * 용   도 : 입력받은 값이 숫자인지 체크한다.
 * @param obj
 * @return boolean
 */
function isNumber(obj) {
	var reg = new RegExp("[0-9]");
	for (var i = 0; i < obj.length; i++) {
		if (!reg.test(obj.charAt(i))) {
			return false;
		}
	}
	return true;
}

/**
 * 용   도 : 입력받은 값이 영문인지 체크한다.
 * @param obj
 * @return boolean
 */
function isAlpha(obj) {
	var reg = new RegExp("[A-Za-z]");
	for (var i = 0; i < obj.length; i++) {
		if (!reg.test(obj.charAt(i))) {
			return false;
		}
	}
	return true;
}

/**
 * 용   도 : 숫자 입력시 소숫점 자리수를 체크한다.
 * 사용예 : onKeyup="dotNumChk( obj, 2, 1 )"
 * @param obj(text field)
 * @param 소수 갯수(#)
 * @return obj or 소수점한자리숫자
 */
function dotNumChk(obj, num1, num2) {
	var t = parseInt(obj);
	if (obj.indexOf('.') != -1) {
		var s = obj.substring(obj.indexOf('.') + 1);
		if (t) {
			l = s.length;
			if (l > num2) {
				//LayerPop.alert('소수점 '+ num +'자리까지만 입력됩니다.');
			}
			return t + "." + s.substring(0, num2);
		}
		return '';
	}
	if (t > 99) {
		return obj.substring(0, num1);
	}
	return obj;
}

/**
 * 용 도 : 숫자 입력 필드에 첫자리 '0'을 입력하지 못하게 한다.
 * 사용예 : onKeyup="startZero( this )"
 * @param obj 필드오브젝트
 */
function startZero(obj) {
	for (var i = 0; i < obj.value.length; i++) {
		if (obj.value.charAt(0) == "0" || obj.value.charAt(0) == ",") {
			var tt = obj.value.substring(1);
			obj.value = tt;
		} else {
			return;
			//obj.value = obj.value;
		}
	}
}

/**
 * 용 도 : 소수점 자리수 제어
 * 사용예 : onKeyup="chkDecimal( this ,2)"
 * @param obj 필드오브젝트, 소수점 자리수
 */
function chkDecimal(obj, len) {
	if (obj.value.indexOf('.') != -1) {
		var tmp = obj.value.split('.');
		if (tmp[1].length > len) {
			obj.value = tmp[0] + "." + tmp[1].substring(0, len);
		}
	}
}

/**
 * 용 도 : 소수점 자리수 제어
 * 사용예 : onKeyup="chkDecimal( value ,2)"
 * @param value 필드값, 소수점 자리수
 */
function chkDecimalValue(str, len) {
	var val = str;
	
	if( val == null ) val = "";
	
	if (val.indexOf('.') != -1) {
		var tmp = val.split('.');
		if (tmp[1].length > len) {
			val = tmp[0] + "." + tmp[1].substring(0, len);
		}
	}
	
	return val;
}

/**
 * 용도 : 입력받은 시간 동안  수행을 정지 한다.
 * 사용법 : pause(1000);
 */
function pause(numberMillis) {
	var now = new Date();
	var exitTime = now.getTime() + numberMillis;
	while (true) {
		now = new Date();
		if (now.getTime() > exitTime)
			return;
	}
}

/**
 * 용   도 : 이메일 유효성 체크를 한다.
 * @param obj
 * @return boolean
 */
function isEmail(obj) {
	if (obj == "") {
		LayerPop.alert("메일주소를 입력해주세요.");
		return false;
	}
	if (obj.indexOf("@") < 1) {
		LayerPop.alert("잘못된 이메일 형식입니다!");
		return false;
	}

	for (var j = 0; j < obj.length; j++) {
		if (obj.charCodeAt(j) > 127) {
			LayerPop.alert("잘못된 이메일 형식입니다!");
			return false;
		}
	}

	var checkdomain = obj.substr(obj.indexOf("@") + 1);

	if (checkdomain == "netian.com" || checkdomain == "sayclub.com"
			|| checkdomain == "sayclub.com") {
		LayerPop.alert("네띠앙/세이클럽/오르지오메일은  더 이상 사용하실 수 없습니다.");
		return false;
	}

	if ((obj.indexOf(".com") < 5) && (obj.indexOf(".org") < 5)
			&& (obj.indexOf(".gov") < 5) && (obj.indexOf(".net") < 5)
			&& (obj.indexOf(".mil") < 5) && (obj.indexOf(".edu") < 5)
			&& (obj.indexOf(".kr") < 4) && (obj.indexOf(".st") < 4)
			&& (obj.indexOf(".tv") < 4) && (obj.indexOf(".ro") < 4)
			&& (obj.indexOf(".arpa") < 6) && (obj.indexOf(".biz") < 5)
			&& (obj.indexOf(".aero") < 6) && (obj.indexOf(".name") < 6)
			&& (obj.indexOf(".coop") < 6) && (obj.indexOf(".info") < 6)
			&& (obj.indexOf(".pro") < 5) && (obj.indexOf(".museum") < 7)) {
		LayerPop.alert("잘못된 이메일 형식입니다!");
		return false;
	}
	return true;
}

/**
 * 용   도 : 만나이구하기
 * @param	주민번호
 * @return	만나이
 */
function getCurrAge(ssn) {
	var today = new Date();
	//var YY = today.getYear();
	var YY = today.getFullYear();
	var MM = today.getMonth() + 1;
	var DD = today.getDate();

	var curryear = YY;
	if (ssn.length < 13)
		return "";
	if (ssn == 0)
		return "";
	var tyear = "";
	ssn = ssn.replace('-', '');
	var tmonth = ssn.substring(2, 4);
	var tday = ssn.substring(4, 6);
	var min = 0;
	if (parseInt(MM) < parseInt(tmonth)) {
		min = 1;
	} else if (parseInt(MM) == parseInt(tmonth)) {
		if (parseInt(DD) < parseInt(tday)) {
			min = 1;
		}
	}
	if (ssn == "0000000000000")
		return 0;
	if ((ssn.charAt(6) == "3") || (ssn.charAt(6) == "4")) {
		tyear = 2000;
	} else if ((ssn.charAt(6) == "5") || (ssn.charAt(6) == "6")) {
		tyear = 1900;
	} else if ((ssn.charAt(6) == "7") || (ssn.charAt(6) == "8")) {
		tyear = 2000;
	} else if ((ssn.charAt(6) == "9") || (ssn.charAt(6) == "0")) {
		tyear = 1800;
	} else {
		tyear = 1900;
	}
	var currage = parseInt(curryear - (tyear + parseInt(ssn.substring(0, 2)))) - min;
	return currage;
}

/**
 * 용   도 : 만나이구하기
 * @param	생년월일
 * @return	만나이
 */
function getCurrAgeByBirth(birth) {
	var today = new Date();
	var YY = today.getFullYear();
	var MM = today.getMonth() + 1;
	var DD = today.getDate();

	var curryear = YY;

	if (birth == 0 || birth.length < 8) {
		return "";
	}
	
	birth = birth.replace(/-/gi, '').replace(/\./gi, '');
	
	var tyear = birth.substring(0, 4);
	var tmonth = birth.substring(4, 6);
	var tday = birth.substring(6, 8);
	var min = 0;
	if (parseInt(MM) < parseInt(tmonth)) {
		min = 1;
	} else if (parseInt(MM) == parseInt(tmonth)) {
		if (parseInt(DD) < parseInt(tday)) {
			min = 1;
		}
	}
	var currage = parseInt(curryear - tyear) - min;
	return currage;
}

/**
 * 용 도 : 주민등록번호 생년월일 체크.
 * @param    jumin1
 * @param    jumin2
 * @return     boolean
 */
function isJuminNoBirth(pObj) {
	if (pObj.val().length != 6) {
		LayerPop.alert("생년월일 6자리를 입력하세요.");
		pObj.val("").focus();
		return false;
	}

	var pattern = /^(?:[0-9]{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[1,2][0-9]|3[0,1]))$/gi;

	if (!pattern.test(pObj.val())) {
		LayerPop.alert("잘못된 생년월일 형식입니다!");
		pObj.val("").focus();
		return false;
	}

	return true;
}

/**
 * 용 도 : 사업자번호 체크
 * @param	bizID
 * @return	boolean
 */
function isBizNo(bizID) {

	var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);
	var tmpBizID, i, chkSum = 0, c2, remander;
	bizID = bizID.replace(/-/gi, '');

	if (Number(bizID) == 0)
		return false;

	for (i = 0; i <= 7; i++)
		chkSum += checkID[i] * bizID.charAt(i);

	c2 = '0' + (checkID[8] * bizID.charAt(8));
	c2 = c2.substring(c2.length - 2, c2.length);
	chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));
	remander = (10 - (chkSum % 10)) % 10

	if (Math.floor(bizID.charAt(9)) == remander)
		return true;
	return false;

}

/**
 * 용 도 : 운전면허번호 체크.
 * @param    jumin1
 * @param    jumin2
 * @return     boolean
 */
function onblurLcns(lobj) {
	var s = (lobj.val()).replace(/-|\//gi, "");
	if (s == "")
		return false;
	if (s.length != 12) {
		LayerPop.alert("운전면허번호가 유효 하지 않습니다.\n확인후 다시 입력해주세요.");
		lobj.focus();
		return false;
	}
	return true;
}

/**
 * 용 도 : 쿠키를 설정한다.
 * @param    name 쿠키명
 * @param    value 쿠키값
 * @param    expiredays 쿠키 요효일
 */
function setCookie(name, value, expiredays) {
	var todayDate = new Date();
	todayDate.setDate(todayDate.getDate() + expiredays);
	document.cookie = name + "=" + escape(value) + "; path=/; expires=" + todayDate.toGMTString() + ";"
}

/**
 * 용 도 : 쿠키를 삭제한다.
 * @param    name 쿠키명
 * @param    value 쿠키값
 * @param    expiredays 쿠키 요효일
 */
function clearCookie(name) {
	setCookie(name, "", -1);
}

/**
 * 용 도 : 쿠키를 읽는다
 * 
 * @param name
 *            쿠키명
 * @return 쿠키값
 */
function getCookie(name) {
	var nameOfCookie = name + "=";
	var x = 0;
	while (x <= document.cookie.length) {
		var y = (x + nameOfCookie.length);
		if (document.cookie.substring(x, y) == nameOfCookie) {
			if ((endOfCookie = document.cookie.indexOf(";", y)) == -1)
				endOfCookie = document.cookie.length;
			return unescape(document.cookie.substring(y, endOfCookie));
		}
		x = document.cookie.indexOf(" ", x) + 1;
		if (x == 0)
			break;
	}
	return "";
}

/**
 * 소수점을 반올림하여 반환한다.
 * 
 * @param val 반올림될 숫자
 * @param pos 반올림될 소수점자리수
 * @return 반올림값
 */
function makeRound(val, pos) {
	var rtn;
	rtn = Math.round(val * Math.pow(10, Math.abs(pos) - 1));
	return rtn / Math.pow(10, Math.abs(pos) - 1);
}

function fnReplaceAll(strTmp, v1, v2) {
	if (isNull(strTmp)) {
		return "";
	}

	while (1) {
		if (-1 != strTmp.indexOf(v1))
			strTmp = strTmp.replace(v1, v2);
		else
			break;
	}

	return strTmp;
}

/*****************************************************************************
 * 용 도 : Select Box 의 Option 을 생성한다.
 * @param obj  Select Box Object Name
 * @param value Array()객체
 * @param choiceStr  첫번째 default option
 * @param defaultValue Select 될 Value
 * @param strOld1 변경될 code string
 * @param strOld2 변경될 value string
 * 
 *     var params = {result:[{"code":"12", "value":"12개월"},
                         {"code":"18",  "value":"18개월"},
                         {"code":"24",  "value":"24개월"},
                         {"code":"36",  "value":"36개월"},
                         {"code":"48",  "value":"48개월"},
                         {"code":"60",  "value":"60개월"},
                         {"code":"72",  "value":"72개월"}]
       }; 
 * makeSelectOption("#loanTrm", params.result, "선택", "72", "cd", "cd_nm");
 * makeSelectOption("#loanTrm", data.codeList2, "대출기간선택", "", "cd", "cd_nm");
 *****************************************************************************/
function makeSelectOption(obj, value, choiceStr, defaultValue, strOld1, strOld2) {
	var tmpStr = JSON.stringify(value);

	var reg = new RegExp(strOld1, "g");
	tmpStr = tmpStr.replace(reg, "cd");
	var reg2 = new RegExp(strOld2, "g");
	tmpStr = tmpStr.replace(reg2, "cd_nm");

	var codeList = JSON.parse(tmpStr);

	if (self.$(obj)) {
		$(obj).empty();

		if (typeof (choiceStr) != "undefined" && choiceStr != "") {
			$(obj).append('<option value="">' + choiceStr + '</option>');
		}
		for (var i = 0; i < codeList.length; i++) {
			$(obj).append('<option value="' + codeList[i].cd + '">' + codeList[i].cd_nm + '</option>');

			if (typeof (defaultValue) != "undefined") {
				if (defaultValue == codeList[i].cd) {
					$(obj).val(codeList[i].cd);
				}
			}
		}
	}
}

/*******************************************************************************
 * 용 도 : encode된 html 태그/문자를 decode처리
 * 
 * @param pStr html문장
 ******************************************************************************/
function unescapeHtml(pStr) {

	if ("undefined" == typeof pStr || null == pStr || "" == pStr)
		return "";

	return pStr.replace(/&amp;/g, '&')
					.replace(/&lt;/g, '<')
					.replace(/&gt;/g, '>')
					.replace(/&quot;/g, '"')
					.replace(/&#039;/g, "'")
					.replace(/&#64;/g, "@")
					.replace(/&#40;/g, "(")
					.replace(/&#41;/g, ")")
					.replace(/&#59;/g, ";");
}

/**
 * 자리수만큼 마스킹처리
 * @param str
 * @param len - 뒤부터 마스킹처리할 자리수
 * @returns
 */
function getMaskStr(str, len) {
	if (isNull(str) || isNull(len)) {
		return "";
	}

	var returnStr = "";

	var data = new Array();
	for (var i = 0; i < str.length; i++) {
		data.push(str.substring(i, i + 1));
	}

	var idx = data.length - 1
	while (len > 0 && idx >= 0) {
		if ('-' != data[idx]) {
			data[idx] = '*';
			len--;
		}
		idx--;
	}

	for (var i = 0; i < data.length; i++) {
		returnStr += data[i];
	}

	return returnStr;
}

/**
 * css 의 even class 위한 짝수처리 
 * @param i
 * @returns
 */
function getEven(i) {
	if (i > 0 && ((i + 1) % 2 < 1)) {
		return true;
	} else {
		return false;
	}
}

/**
 * 더보기 할 경우 tr 태그에 선언된 id 로 포커스 이동처리
 * @param id - 예) #no1 , #id
 * @returns
 */
function setFocusForList(id) {
//	var tar = id, top = $(tar).offset().top - 80;
//	location.href = tar;
//	$(window).scrollTop(top);
	
	var tar = id;
	$(tar).attr('tabindex',0).focus();
	$(tar+'[tabindex]').focusout(function(){
		$(tar).removeAttr('tabindex');
	});
}

/**
 * input 태그 문자 입력 시 공백 입력 방지
 * <input type=text onkeyup="noSpaceForm(this);" >
 * 
 * @param obj
 * @returns
 */
function noSpaceForm(obj) {
	var str_space = /\s/g;
	obj.value = obj.value.replace(str_space, "");
}

/**
 * 세션스토리지 json stringify저장
 * setObjSessionStorage("t1",{"a":"b"});
 * @param obj
 * @returns
 */
function setObjSessionStorage(key, obj) {
	if (isNull(key) || isNull(key)) {
		return;
	}
	sessionStorage.setItem(key, JSON.stringify(obj));
}

/**
 * 세션스토리지 json Object 조회
 * var tObj = getObjSessionStorage("t1");
 * @param obj
 * @returns
 */
function getObjSessionStorage(key) {
	var storageObject = {};
	try {
		storageObject = JSON.parse(sessionStorage.getItem(key));
	} catch (e) {
		console.log("getObjSessionStorage = " + key);
	}

	return storageObject;
}

/**
 * 세션스토리지 삭제
 * 
 * @param obj
 * @returns
 */
function removeObjSessionStorage(key) {
	if (isNull(key) || isNull(key)) {
		return;
	}
	sessionStorage.removeItem(key);
}

/**
 * 세션스토리지 전체삭제
 * 
 * @param obj
 * @returns
 */
function removeAllSessionStorage() {
	sessionStorage.clear();
}

/**
 * 세션스토리지 전체 cnt
 * 
 * @param obj
 * @returns
 */
function getCntSessionStorage() {
	return sessionStorage.length;
}

/**
 * 공통코드 조회
 * 
 * @param grp_cd
 * @param callbackFun
 * @returns
 * "result": [
	 {
		 "grp_cd": "B01",
		 "grp_cd_nm": "사고원인",
		 "cd": "1",
		 "cd_nm": "주취(0.05%이상)",
		 "dsp_order": "1"
	 },
	 {
		 "grp_cd": "B01",
		 "grp_cd_nm": "사고원인",
		 "cd": "2",
		 "cd_nm": "음주(0.05%미만)",
		 "dsp_order": "2"
	 }
 ]
 */
function getGrpCodeList(grp_cd, callbackFun) {

	var r = {};
	var param = {
		"grp_cd" : grp_cd
	};
	param = JSON.stringify(param);

	$.ajax({
		type : 'post',
		url : _contextPath + "/cmm/code/getGrpCodeList.do",
		data : param,
		//async		: false,
		dataType : 'json',
		contentType : 'application/json; charset=utf-8',
		error : function(data) {
			callbackFun(r);
		},
		success : function(data) {
			callbackFun(data);
		}
	});
}

/**
 * 공통코드 조회
 * @param grp_cd
 * @param cd
 * @param callbackFun
 * @returns
 */
function getCodeName(grp_cd, cd, callbackFun) {
	var r = "";
	var param = {
		"grp_cd" : grp_cd,
		"cd" : cd
	};
	param = JSON.stringify(param);

	$.ajax({
		type : 'post',
		url : _contextPath + "/cmm/code/getCodeName.do",
		data : param,
		//async		: false,
		dataType : 'json',
		contentType : 'application/json; charset=utf-8',
		error : function(data) {
			callbackFun(r);
		},
		success : function(data) {
			callbackFun(data.result);
		}
	});
}
/**
 * 공통코드 조회- 코드네임과 코드도 같이 return
 * @param grp_cd
 * @param cd
 * @param callbackFun
 * @returns
 */
function getCodeName2(grp_cd, cd, callbackFun) {
	var r = "";
	var param = {
		"grp_cd" : grp_cd,
		"cd" : cd
	};
	param = JSON.stringify(param);

	$.ajax({
		type : 'post',
		url : _contextPath + "/cmm/code/getCodeName.do",
		data : param,
		//async		: false,
		dataType : 'json',
		contentType : 'application/json; charset=utf-8',
		error : function(data) {
			callbackFun(r);
		},
		success : function(data) {
			var result = {
					"cd_nm" : data,
					"cd" : cd
				};
			callbackFun(result);
		}
	});
}
//checkEmpty(form1.name, '이름');
//checkEmpty(form1.name, '이름', false);
function checkEmpty(elem, desc, is_rtrim) {
	if (is_rtrim != false) {
		if ((elem.nodeName).toUpperCase() != "SELECT") { // select 박스의 선택되어진 값이 없어져서 수정 : 장차법 - vegas09
			elem.value = trim(elem.value);
		}
	}
	if (!isEmpty(elem.value)) {
		if (elem.type != 'hidden')
			elem.focus();
		if (desc != null) {
			var text = "입력하세요";
			if ((elem.nodeName).toUpperCase() == "SELECT") {
				text = "선택하세요";
			}
			LayerPop.alert('' + desc + ' 항목을 ' + text);
		} else {
			LayerPop.alert('필수입력 항목을 입력하세요');
		}
		return false;
	}
	return true;
}

/*********************************************************************
 **  desc    : input text valid check
 **  sample  : 1. validCheck($(id),"메세지", focus, false);
 *				if (!validCheck($("#gpcd"),"그룹코드는 필수 입력 항목입니다.")) return;
 * 				if (!validCheck($("#cdVal"),"코드는 필수 입력 항목입니다.")) return;
 *********************************************************************/
function validCheck(o, msg, focus, isNum){
     var space = /\S/;
     var ret = true;

     focus = focus===false?false:true;

     if ("undefined" == typeof o.val() || null == o.val() || o.val() == "" || !space.test(o.val())){
         if (msg!=false && msg!=undefined && msg!=""){
             
        	 LayerPop.alert(msg, function() {
	        		 if (focus===true){
	                     o.focus();
	                 }
				}); 
        	 
         }else {
             if (focus===true){
                 o.focus();
             }
         }

         ret = false;
     }

     if (ret===true && isNum===true){
         var numberCheck = isNumber(o.val());

         if (!numberCheck){
             if (msg!=false){
            	 
            	 LayerPop.alert("숫자만 입력해 주세요.", function() {
	        		 if (focus===true){
	                     o.focus();
	                 }
				}); 
            	 
             }else {
                 if (focus===true){
                     o.focus();
                 }               
             }
             o.val("");
             ret = false;            
         }
     }

     return ret;
 }

//RD 호출후 만족도 조사 팝업 공통 호출-asis common.js
var openSatisfaction = function(chk,code, qstnr_type_cd, qstnr_kind_cd){
	if(!chk || !code || !qstnr_type_cd || !qstnr_kind_cd){
		LayerPop.alert("금인자가 부족합니다.");
		return;
	}
	if(chk == "true") openWindow('/Satisfaction.do?qstnr_type_cd='+qstnr_type_cd+'&qstnr_kind_cd='+qstnr_kind_cd+'&svc_name=' + code,'730','650','status=no,scrollbars=yes,resizable=no', 'Satisfaction');
};


//--------------------- 팝업 관련 S -------------------------------- //
function openWindow(url, width, height, feature, title) {
	if(typeof(feature)=='undefined' || feature==null) {
		feature = 'toolbars=no,location=no,directories=no,menu=no' + ',status=no,scrollbars=no,resizable=no';
	} else {
		feature = 'toolbars=no,location=no,directories=no,menu=no,' + feature;
	}

	if(typeof(title)=='undefined'){
		title = "popupWindow";
	}

	var top = (window.screen.height - height) / 3;
	var left = (window.screen.width - width) / 2;
	if (top < 0) top = 0;
	if (left < 0) left = 0;

	feature += ",left=" + left + ",top=" + top + ",width=" + width + ",height=" + height;

	var popupWindow = window.open(url, title, feature);
	popupWindow.focus();
}


/**
 * 용  도 : 입력 값 중 숫자만 반환한다.
 * @param	String
 * @return	String
 */
function fnc_onlyNumber(obj) {
	var return_value = "";
	if ( !isNull(obj.value) ) {
		return_value = obj.value.replace(/[^0-9]/g, "");
	}
	obj.value = return_value;
}

/**
 * 용  도 : 입력 날짜의 유효성 체크 여부를 반환한다.
 * @param date
 * @returns boolean
 */
function checkDate(date){
	var chooseDate = date.replace(/\-/g, '').replace(/\./g, '');
	var vDate = new Date();
	vDate.setFullYear(chooseDate.substr(0, 4));
	vDate.setMonth(parseInt(chooseDate.substr(4, 2)) - 1, chooseDate.substr(6, 2));
	
	if(vDate.getFullYear() != parseInt(chooseDate.substr(0, 4)) ||
		(vDate.getMonth() + 1) != parseInt(chooseDate.substr(4, 2)) ||
		vDate.getDate() != parseInt(chooseDate.substr(6, 2))) {
		return false;
	}
	
	return true;
}

/**
 * 입력된 두날짜 차이를 반환한다.
 * @param d1
 * @param d2
 * @returns
 */
function getDateInterval(d1,d2){
	var date1 = toTimeObject(d1.replace(/\-/g, '').replace(/\./g, ''));
	var date2 = toTimeObject(d2.replace(/\-/g, '').replace(/\./g, ''));
	var returnVal = Math.ceil((date2 - date1) / 1000 / 24 / 60 / 60);
	return returnVal + 1;
}


/**
 * 입력값을 날짜 형식으로 반환한다.
 * @param time
 * @returns
 */
function toTimeObject(time) {
	var year  = time.substr(0,4);
	var month = time.substr(4,2) - 1;
	var day   = time.substr(6,2);
	var hour  = time.substr(8,2);
	var min   = time.substr(10,2);

	return new Date(year,month,day,hour,min);
}




var zoneCode     = '';
var roadAddr1    = '';
var roadAddr2    = '';
var jibunAddr1   = '';
var jibunAddr2   = '';
var etcAddr      = '';

/**
 * 우편번호찾기 팝업
 * @param 
 * @returns
 */
function fnPostcode(str) {
	Dialog.open('#dialogAdress');
	execDaumPostcode(str);
}

/**
 * 우편번호찾기 팝업2
 * @param 
 * @returns
 */
function fnPostcode2(str) {
	Dialog.open('#dialogAdress2');
	execDaumPostcode2(str);
}

/**
 * daum주소팝업
 * @param 
 * @returns
 */
// Daum API 동작
function execDaumPostcode(str) {
	$('#daumloc').val(str);	// 부모창에서 POST 방식으로 가져옴 H: 자택, C: 직장, E: 기타
	var element_wrap = document.getElementById('daumWrap');  // 우편번호 찾기 화면을 넣을 element
	
	var themeObj = {
		bgColor : "#FFFFFF",
		outlineColor : "#57a095" 
	};
	
	new daum.Postcode({
		oncomplete: function(data) {
			// 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.

            // 각 주소의 노출 규칙에 따라 주소를 조합한다.
            // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
            var addr = ''; // 주소 변수
            var extraAddr = ''; // 참고항목 변수
            var addrType = '';  // 신구주소 구분
            var addrArr = new Array();
            
            var _roadAddress = !data.roadAddress ? data.autoRoadAddress : data.roadAddress;
            var _jibunAddress = !data.jibunAddress ? data.autoJibunAddress : data.jibunAddress;

            //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
            if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우
                addr = _roadAddress;
                addrType = "R";
            } else { // 사용자가 지번 주소를 선택했을 경우(J)
                addr = _jibunAddress;
                addrType = "J";
            }
            
            //JR이면 도로명주소 지번지 배열로 반환
            if(str == "RJ") {
            	addrArr[0] = _roadAddress;
            	addrArr[1] = _jibunAddress;
                // 우편번호와 주소 정보를 해당 필드에 넣는다.           
                fnSetZipCode(str, data.zonecode, addrArr, "RJ");   
            } else {
                // 우편번호와 주소 정보를 해당 필드에 넣는다.           
                fnSetZipCode(str, data.zonecode, addr, addrType);    	
            }

            Dialog.close('#dialogAdress');
        	setTimeout(function(){
        		$('.btn_daum_map').focus();
        	}, 100);            
 
		},
		// 우편번호 찾기 화면 크기가 조정되었을때 실행할 코드를 작성하는 부분. iframe을 넣은 element의 넓이, 높이값을 조정한다.
		onresize : function(size) {
			element_wrap.style.height = '500px';
		},
		width : '100%',
		height : '100%',
		theme : themeObj,
		animation : true,
		autoMapping : true,
		hideEngBtn : true
	}).embed(element_wrap, { // iframe 을 사용하기 위해 embed를 사용해야하며 autoClose가 false여야 주소를 선택해도 창이 닫히지 않는다.
			autoClose: false //기본값 true
	});
	
	// iframe을 넣은 element를 보이게 한다.
	element_wrap.style.display = 'block';
	
	
}


/**
 * daum주소팝업
 * @param 
 * @returns
 */
// Daum API 동작
function execDaumPostcode2(str) {
	$('#daumloc').val(str);	// 부모창에서 POST 방식으로 가져옴 H: 자택, C: 직장, E: 기타
	var element_wrap = document.getElementById('daumWrap');  // 우편번호 찾기 화면을 넣을 element
	
	var themeObj = {
		bgColor : "#FFFFFF",
		outlineColor : "#57a095" 
	};
	
	new daum.Postcode({
		oncomplete: function(data) {
			
			//초기화
			zoneCode    = '';
			roadAddr1   = '';
			roadAddr2   = '';
			jibunAddr1  = '';
			jibunAddr2  = '';
			etcAddr     = '';
			
			$('#roadAddr').html('');
			$('#jibunAddr').html('');
			$('#etcAddr').val('');
			
			// 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.

            // 각 주소의 노출 규칙에 따라 주소를 조합한다.
            // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
            var addr = ''; // 주소 변수
            var extraAddr = ''; // 참고항목 변수
            var addrType = '';  // 신구주소 구분
            var addrArr = new Array();
            
            var _roadAddress = !data.roadAddress ? data.autoRoadAddress : data.roadAddress;
            var _jibunAddress = !data.jibunAddress ? data.autoJibunAddress : data.jibunAddress;

            if(data.buildingName){
            	_roadAddress += " (" + data.buildingName + ")";
            	_jibunAddress += " (" + data.buildingName + ")";
            }
            
            fnSetAddr('roadAddr', data.zonecode, _roadAddress, '');
            fnSetAddr('jibunAddr',  data.zonecode, _jibunAddress, '');
 
		},
		// 우편번호 찾기 화면 크기가 조정되었을때 실행할 코드를 작성하는 부분. iframe을 넣은 element의 넓이, 높이값을 조정한다.
		onresize : function(size) {
			element_wrap.style.height = '400px';
			$("#dialogAdress2").find('.dialog_content_scroller').mCustomScrollbar({
				advanced:{
					autoScrollOnFocus:true,
					updateOnContentResize:true
				}
			});
		},
		width : '100%',
		height : '100%',
		theme : themeObj,
		animation : true,
		autoMapping : true,
		hideEngBtn : true
	}).embed(element_wrap, { // iframe 을 사용하기 위해 embed를 사용해야하며 autoClose가 false여야 주소를 선택해도 창이 닫히지 않는다.
			autoClose: false //기본값 true
	});
	
	// iframe을 넣은 element를 보이게 한다.
	element_wrap.style.display = 'block';
	
	
}

/**
 * daum주소팝업 주소값 셋팅
 * @param 
 * @returns
 */
// Daum API 동작
function fnSetAddr(id, code, addr1, addr2){
	var fullAddr = '';
	if(code !== '') fullAddr += code.trim();
	if(addr1 !== '')	fullAddr += ' ' + addr1.trim();
	if(addr2 !== '')	fullAddr += ' ' + addr2.trim();
	zoneCode     = code;
	if(id == "roadAddr") {
		roadAddr1    = addr1;
		roadAddr2    = addr2;
	} else {
		jibunAddr1   = addr1;
		jibunAddr2   = addr2;
	}
	$('#'+id).html(fullAddr);
	$('#etcAddr').val('');
	$('#etcAddr').focus();	
}

/**
 * daum주소팝업 닫기
 * @param 
 * @returns
 */
// Daum API 동작
function closeDaumPostcode() {
	
	var element_wrap = document.getElementById('daumWrap');  // 우편번호 찾기 화면을 넣을 element
	
	// iframe을 넣은 element를 안보이게 한다.
	element_wrap.style.display = 'none';
    Dialog.close('#dialogAdress');
	setTimeout(function(){
		$('.btn_daum_map').focus();
	}, 100);
    
}

/**
 * daum주소팝업 닫기
 * @param 
 * @returns
 */
// Daum API 동작
function closeDaumPostcode2() {
	
	var element_wrap = document.getElementById('daumWrap');  // 우편번호 찾기 화면을 넣을 element
	// iframe을 넣은 element를 안보이게 한다.
	element_wrap.style.display = 'none';
    Dialog.close('#dialogAdress2');
}



/**
 * 레이어 팝업 (alert 또는 confirm)
 * 
 * ex.alert1) LayerPop.alert("메세지")
 * ex.alert2) LayerPop.alert("메세지", callbackFn)
 * ex.confirm) LayerPop.confirm("메세지", callbackFn)
 */
var LayerPop = {
	
	alert_html : function() {
		var _html = '';
		_html += '<div class="layerPop alert_pop dialog">';
		_html += '	<div class="dialog_table">';
		_html += '		<div class="dialog_cell">';
		_html += '			<div class="alert_dialog">';
		_html += '				<div class="message"></div>';
		_html += '				<div class="btn_set">';
		_html += '					<ul class="grid s1">';
		_html += '						<li><a href="#" class="alert_pop_ok ok">확인</a></li>';
		_html += '					</ul>';
		_html += '				</div>';
		_html += '			</div>';
		_html += '		</div>';
		_html += '	</div>';
		_html += '</div>';
		return _html;
	},
	
	confirm_html : function() {
		var _html = '';
		_html += '<div class="layerPop confirm_pop dialog">';
		_html += '	<div class="dialog_table">';
		_html += '		<div class="dialog_cell">';
		_html += '			<div class="alert_dialog">';
		_html += '				<div class="message"></div>';
		_html += '				<div class="btn_set">';
		_html += '					<ul class="grid s2">';
		_html += '						<li><a href="#" class="confirm_pop_cancel">취소</a></li>';
		_html += '						<li><a href="#" class="confirm_pop_ok ok">확인</a></li>';
		_html += '					</ul>';
		_html += '				</div>';
		_html += '			</div>';
		_html += '		</div>';
		_html += '	</div>';
		_html += '</div>';
		return _html;
	},
	
	alert : function(msg, callback) {
		$('body').append(LayerPop.alert_html);
		var target = $(".layerPop.alert_pop");
		if (msg) target.find(".message").html(msg);
		Dialog.open(target);
		$('.alert_pop_ok').focus();
		
		$('.alert_pop_ok', target).click(function(e) {
			e.preventDefault();
			Dialog.close(target);
			target.remove();
			if (typeof callback != 'undefined' && callback) callback();
		});
		
	},
	
	confirm : function(msg, callback) {
		$('body').append(LayerPop.confirm_html);
		var target = $(".layerPop.confirm_pop");
		if (msg) target.find(".message").html(msg);
		Dialog.open(target);
		$('.confirm_pop_cancel').focus();
	
		$('.confirm_pop_ok', target).click(function(e) {
			e.preventDefault();
			Dialog.close(target);
			target.remove();
			callback(true);
		});
		
		$('.confirm_pop_cancel', target).click(function(e) {
			e.preventDefault();
			Dialog.close(target);
			target.remove();
			callback(false);
		});
	}

}

//한글여부 체크
function checkHangul(str){
	var ch;
	for( var i=0 ; i < str.length ; i++ ) {
		if( (str.charAt(i) >= '0' && str.charAt(i) <= '9') ) return false;
		if( (str.charAt(i) >= 'a' && str.charAt(i) <= 'z') || (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') ) {
			return false;
		}
		ch = escape(str.charAt(i));
		if(strCharByte(ch)!=2)	return false;
	}
	return true;
}

//XSS방지
function replaceSpecChar(val){
	val = val.replace(/</gi, "");
	val = val.replace(/>/gi, "");
	val = val.replace(/script/gi, "");
	val = val.replace(/s\s*c\s*r\s*u\s*p\s*t/gi, "");
	val = val.replace(/document/gi, "");
	val = val.replace(/cookie/gi, "");
	val = val.replace(/alert/gi, "");
	val = replaceAll(val, '&', "");
	val = replaceAll(val, '#', "");
	return val;
} 

function strCharByte(chStr){
	if(chStr.substring(0,2)=='%u'){
		if(chStr.substring(2,4)=='00')
			return 1;
		else
			return 2;
	}else if(chStr.substring(0,1)=='%'){
		if(parseInt(chStr.substring(1,3),16) > 127)
			return 2;
		else
			return 1;
	}else{
		return 1;
	}
}

/**
 * comFWMAL.chkValid 참조
 *
 * 유효성 체크
 * dvcd    : 체크 구분 (null:빈값, len:길이, minLen:최소길이, maxLen:최대길이)
 * obj     : 체크할 오브젝트
 * chkLen  : 체크할 길이
 * msg     : 체크 후 메세지
 * focusYn : 체크 후 포커스 여부
 */
function fnChkValid(dvcd, obj, chkLen, msg, focusYn) {
	
	if (isNull(dvcd)) return false;
	
	var objVal = "";
	if (typeof obj.val() != "undefined") objVal = obj.val().replace(/-/gi, '').replace(/\./gi, '');
	
	fnChkReqTxt();
	
	//빈값 체크
	if (dvcd == "null") {
		if (isNull(objVal)) {
			if (!isNull(msg)) {
				LayerPop.alert(msg, function() {
					if (!isNull(focusYn)) obj.focus();
				});
			}
			return false;
		}
	}
	
	//체크 체크
	if (dvcd == "checked") {
		if (!obj.is(':checked')) {
			if (!isNull(msg)) {
				LayerPop.alert(msg, function() {
					if (!isNull(focusYn)) obj.focus();
				});
			}
			return false;
		}
	}
	
	//길이 체크
	if (dvcd == "len") {
		if (!isNull(objVal) && objVal.length != chkLen) {
			if (!isNull(msg)) {
				LayerPop.alert(msg, function() {
					if (!isNull(focusYn) && focusYn == "Y") obj.focus();
				});
			}
			return false;
		}
	}
	
	//최소 길이 체크
	if (dvcd == "minLen") {
		if (!isNull(objVal) && objVal.length < chkLen) {
			if (!isNull(msg)) {
				LayerPop.alert(msg, function() {
					if (!isNull(focusYn) && focusYn == "Y") obj.focus();
				});
			}
			return false;
		}
	}
	
	//최대 길이 체크
	if (dvcd == "maxLen") {
		if (!isNull(objVal) && objVal.length > chkLen) {
			if (!isNull(msg)) {
				LayerPop.alert(msg, function() {
					if (!isNull(focusYn) && focusYn == "Y") obj.focus();
				});
			}
			return false;
		}
	}
	
	return true;
}

/**
 * comFWMAL.chkReqTxt 참조
 * 
 * 필수항목 미입력 텍스트 출력
 * chkValid 함수에서 벨리데이션 체크 시 사용
 */
function fnChkReqTxt() {
	var obj = $('[class*="chkReq"]:visible');
	for (var i=0; i<obj.length; i++) {
		
		var type  = obj[i].type; 
		var value = (!isNull(obj[i].value)) ? obj[i].value.replace(/-/gi, '').replace(/\./gi, '') : "";
		var sIdx  = obj[i].selectedIndex;
		var tar   = "";
		var dp    = 'none';
		
		if (type == "select-one") {
			tar = obj[i].getAttribute('id');
			if (isNull(value) && sIdx <= 0) dp = 'block';
		} else if (type == "radio") {
			tar = obj[i].name;
			if (isNull($('input:radio[name=' + obj[i].name + ']:checked').val())) dp = 'block';
		} else {
			tar = obj[i].getAttribute('id');
			if (isNull(value)) dp = 'block';
		}
		$('.chkReqTxt_' + tar).css('display', dp);
	}
}

/**
 * 동적 폼 input 객체 생성 
 **/	
function createInputElement(frm, inp) {
	//if($('#'+frm +'> #'+inp).length < 1) {
	if($('#'+frm +'> Input:hidden[name=raphaelAgent]').length < 1) {
		$('#'+frm).append($('<input/>', {type:'hidden', id:"", name:inp}));		
	}			
}

/**
 * raphaello input 생성
 * param : frm - form 객체 ID
 **/	
function setRaphaello(frm) {	
	var form1 = frm; 
	createInputElement(frm, "raphaelAgent");  // FDS 객체 동적 생성	
	//var frm = $('#'+frm);
	//var frm = document.form1;
	//frm.raphaelAgent.value = rts.raphaelloGatherPlayer();
	//$('#raphaelAgent').val(rts.raphaelloGatherPlayer());
	
	$("Input:hidden[name=raphaelAgent]").val(rts.raphaelloGatherPlayer());
}


/**************************자동로그아웃******************************/
$.session = function(){

	var autologoutGo	 = false;
    var sTimeId          = "timeViewTarget";
    var sAutoExtend      = "_AUTO_EXTEND";
    var viewFlag         = true;
    var cViewFlag        = true;
    var startSecond      =  10*60;
    var tempSecond     	 =  10*60;
    var viewSecond       = 60;
    var logoutMin 		 = 10;
    var sAutoExtendFlag  = false;
    var sTimerObj;
    var startFlag = false;

    return{

      /**
       * $.session.setAutoExtendFlag(flag) : 로그인자동연장 설정
       *  @param {Object} flag : (true:설정, false:취소)
       */
      setAutoExtendFlag : function(flag){
        sAutoExtendFlag = flag;
      },

      /**
       * $.session.getAutoExtendFlag() : 자동로그인연장 값 가져오기
       */
      getAutoExtendFlag : function(){
        return sAutoExtendFlag;
      },

      /**
       * $.session.setTimeText() : 자동 로그아웃 되기 까지 남은 시작 보여주기
       */
      setTimeText : function(timeText){
        $("#"+sTimeId).text(timeText);
      },

      /**
       * $.session.showMessage() : 자동 로그아웃 팝업레이어 보여주기
       */
      showMessage : function(){
    	  if(viewFlag){
    		  Dialog.open('#logOutDialogBefore');
    		  $("#logoutMinBefore").text(logoutMin);
    		  viewFlag = false;
    	  }
      },

      /**
       * $.session.clearMessage() : 자동 로그아웃 팝업 레이어 삭제
       */
      clearMessage : function(){
    	  Dialog.close('#logOutDialogBefore');
    	  if(sTimerObj !== undefined){
    		  clearInterval(sTimerObj);
    	  }
    	  tempSecond = startSecond;
    	  viewFlag   = true;
    	  cViewFlag  = true;;
      },

      /**
       * $.session.showAutoExtend(str) : 로그인자동연장 화면 View
       *  @param {Object} flag : 보여주기 구분
       */
      showAutoExtend : function(flag){
        if(flag && !cViewFlag){
          var now = new Date();
          var viewText = "Extend Login Time : "+now.toLocaleTimeString()+"<br/>";
          var tObj = $("#"+sAutoExtend);
          tObj.html(tObj.html()+viewText);
        }
      },

      /**
       * $.session.startLoginTimeout() : 세션 타임 체크 9분 후 로그인 연장 및 로그아웃 레이어 팝업 출력
       */
      startLoginTimeout : function(){
        if(tempSecond <= viewSecond){
          if($.session.getAutoExtendFlag()){
            $.session.extend();
            $.session.showAutoExtend(true);
          }else{
            $.session.showMessage();
            
            if(tempSecond == '60'){
            	$.session.setTimeText(tempSecond);
            }else{
            	$.session.setTimeText((parseInt(tempSecond%60) < 10) ? "0"+parseInt(tempSecond%60)  : parseInt(tempSecond%60) );
            }
          }
    	  if(tempSecond == 0 && autologoutGo == false){
	        	autologoutGo = true;
	        	this.timeOverLoginOut();
	          }	        	  
        }
        $.session.countTimer(false);
      },

      /**
       * $.session.countTimer(flag) : 남은시간 계산하기
       *  @param {Object} flag : 타임머 보여주기 플래그
       */
      countTimer : function(flag) {
        if(cViewFlag && flag) {
          cViewFlag = false;
        }
        if(flag){
          var tempText = $.session.zeroToText(parseInt(tempSecond/60))+":"+$.session.zeroToText(parseInt(tempSecond%60));
        }
        if(tempSecond>0) {
        	tempSecond--;
        } 
      },

      /**
       * $.session.zeroToText(n) : 한자리를 두자리 문자열로 변환
       *  @param {Object} n : 문자
       */
      zeroToText : function(n) {
        return n>9 ? n : "0"+n;
      },

      /**
       * $.session.logout() : 로그아웃 실행
       */
      logout : function(){
    	  location.href = "/logout.do";
      },
      /**
       * 추가 : vegas09 
       * 자동로그아웃 
       */
      timeOverLoginOut : function(){
    	  
    	  var param ={};
    	  callAjaxParams(param, "/SESSLOGOUT_AX.do"
    			  	, function(err){
    		  			LayerPop.alert('자동로그아웃중 시스템장애가 발생하였습니다.', function(){
    		  				window.location.reload();
    		  			});
		    	  	}
    	  			, function(data){
			    		  if(data.result == 'Y'){
			    			  Dialog.close('#logOutDialogBefore');
			    			  Dialog.open('#logOutDialogAfter');
			    			  $("#logoutMinAfter").text(logoutMin);
			    			  if(sTimerObj !== undefined){
			    	    		  clearInterval(sTimerObj);
			    	    	  }
			    		  }else{
			    			  LayerPop.alert('자동로그아웃중 시스템장애가 발생하였습니다.', function(){
		    		  				window.location.reload();
		    		  			});
			    		  }
		    		}, "SESSLOGOUT");
    	  
      },
      /**
       * $.session.sessionTimerStart(autoExtendFlag) : 자동 로그아웃 타임머 실행
       *  @param {Object} autoExtendFlag : 자동로그인 설정
       */
      sessionTimerStart : function(autoExtendFlag){
    	  if(_isLogin == 'Y'){
	    	sAutoExtendFlag = (autoExtendFlag === undefined) ? false : autoExtendFlag;	        	        
	        startSecond     =  logoutMin*60;
	        tempSecond      =  logoutMin*60;
	        
	        sTimerObj       = setInterval("$.session.startLoginTimeout()" ,1000);
	        startFlag = true;
    	  }
      },

      /**
       * $.session.extend() : 자동로그아웃 세션 연장
       */
      extend : function(){
    	  var param ={};
    	  callAjaxParams(param, "/SESSEXTEND_AX.do"
    			  	, function(err){
		    		  	$.session.clearMessage();
		    		  	$.session.logout();
		    	  	}
    	  			, function(data){
    	  				if(data.result != 'Y'){
    	  					$.session.clearMessage();
    	  					$.session.logout();
    	  				}
		    		}, "SESSEXTEND");
      },
      
      ajaxExtend : function(){
    	  if(startFlag){
    		  $.session.clearMessage();
    		  $.session.sessionTimerStart(sAutoExtendFlag);
    	  }
      },
      
      goAfterPage : function(){
    	  Loading.open();
    	  location.href = "/FWMAIV0001.do";
      }
    }
  }();	
  /**************************자동로그아웃******************************/

/**
 * 화면클릭 로그저장 - 다른 사이트 연결시 사용
 * @param open_url
 * @param 
 * @returns
 */
function fnSaveClickLog(open_url, clsf_nm, dtl_expl) {
	
	//외부 URL 연결
	popOpenWin(open_url, "status=no,toolbar=no,menubar=no,location=no,scrollbars=yes");
	
	//화면클릭로그 저장
	var params = {};
	params.clsf_nm = encodeURIComponent(clsf_nm);
	params.dtl_expl = encodeURIComponent(dtl_expl);
	params.url_adr = encodeURIComponent(open_url);
	
	$.ajax({
		type : 'post',
		url : _contextPath + "/saveScrnClick_AX.do",
		data : JSON.stringify(params),
		dataType : 'json',
		async : true,
		contentType : 'application/json; charset=utf-8',
		beforeSend : function() {
			$.session.ajaxExtend();
		},
		complete : function() {			
		},
		error : function(data) {
		},
		success : function(data) {
			console.log(data.errMsg);
		}
	});
	
}

/**
 * (관리자 대시보드) 가입상담 통계 데이터 적재
 * @param logDvcd (ARC_PDC:보험상품메뉴유입건수, ARC_ENY:보험가입상담신청건수, DICT_CM:다이렉트CM메뉴유입건수)
 * @returns
 */
function fnSaveJoinConslStt(logDvcd) {
	
	if (isNull(logDvcd)) return false;
	
	var params = {'log_dvcd' : logDvcd};
	
	$.ajax({
		type : 'post',
		url : _contextPath + "/joinConslStt_AX.do",
		data : JSON.stringify(params),
		dataType : 'json',
		async : true,
		contentType : 'application/json; charset=utf-8',
		beforeSend : function() {
		},
		complete : function() {			
		},
		error : function(data) {
			//console.log("error : ", data);
		},
		success : function(data) {
			//console.log("success : ", data);
		}
	});
	
}

/**
 * 용  도 : Ajax호출을 간단하게 호출하기 위한 function
 * 사용화면 : 마이페이지 - 보상현황 (Div 영역의 Loading 처리를 위해서 전체페이지 Loading 호출 함수 제거)
 * 사용예제:  callAjax("#listForm","/pc/fndChg/test.do");//Ajax데이터 조회후 callback(data){} 함수만들어서 사용하면 됨.
 * callbackErrFun - 에러콜백, callbackFun - callback 파라미터 추가
 * @param    String
 * @return    String
 */
function callAjaxMyPage(formId, url, callbackErrFun, callbackFun, screenId, callbackAsync) {
	var inputParams = {};
	var paramsStr;

	if ("" == isNullRE(callbackAsync)) {
		callbackAsync = true;
	}

	paramsStr = JSON.stringify($(formId).serializeObject());

	//console.log("inputParams  ======== "+ paramsStr);
	//console.log("inputParams replace ======== "+ paramsStr.replace(/\\/gi,""));

	$.ajax({
		type : 'post',
		url : _contextPath + url,
		data : paramsStr,
		dataType : 'json',
		async : callbackAsync,
		contentType : 'application/json; charset=utf-8',
		beforeSend : function() {
			$.session.ajaxExtend();			
		},
		complete : function() {			
		},
		error : function(data) {
			if (typeof (callbackErrFun) == "undefined"
					|| callbackErrFun == "") {
				LayerPop.alert("정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.", function() {
				});
			} else {
				callbackErrFun(data);
			}
		},
		success : function(data) {
			if (typeof (callbackFun) == "undefined"
					|| callbackFun == "") {
				callback(data);
			} else {
				if (data != undefined && data.errMsg != undefined) {
					console.log(data.errMsg);
					
					msg = "정상적으로 처리되지 않았습니다.<br/>잠시 후 다시 시도해 주세요.";
					isTimeCheck = false;	//이용시간체크 에러 여부
					isDuplicate = false;	//중복록인 에러 여부
					if ( data.errMsg.rspnCd != undefined ) {
						msg = data.errMsg.rspnMsgCtnt;
						if ( data.errMsg.rspnCd == "-1000" ) {
							isTimeCheck = true;
						} else if ( data.errMsg.rspnCd == "88887" ) {
							isDuplicate = true;
						}
					}
					
					LayerPop.alert(msg, function() {
						if ( isTimeCheck || isDuplicate ) {
							//업무별 이용가능시간 에러
							location.href = "/main.do";
						}
					});
				} else {
					callbackFun(data);
				}
			}
		}
	});
}


var BROSWER_CONST = {
	"debug"			: true,
	"debugAlert"	: true,
	"exEXObjName"	: "CROSSWARPEX",
	"frameName"		: "",
	"browserInfo"	: "",
	"OSInfo"		: "",
	"pluginInfo"	: [],
	"extabid"		: "",
	"pluginCount"	: 0,
	"isInstalled"	: false,
	"tmpExtArr"		: [],
};

var BROSWER_UTIL = {
	getOSInfo : function(){
		var
			tp = navigator.platform,
			ua = navigator.userAgent,
			tem;
			
		//exlog("platform", tp);
		//exlog("userAgent", ua);
		var result = {};
		
		// platform
    	if (tp == "Win32" || tp == "Win64"){
    		if(ua.search("Windows Phone") >= 0){
    			result.platform = "Windows Phone";
    			result.name="Windows Phone";
    		} else {
    			result.platform = "WINDOWS";
    		}
    	} else if (tp == "MacIntel") {
    		if((ua.search("iPhone") >= 0) || (ua.search("iPad") >= 0) || (ua.search("iPod") >= 0)){
    			result.platform = "iOS";
    			result.name="iOS";
    		} else {
    			result.platform = "MACOSX";
    		}
		} else if (tp.search("Linux") >= 0) {
			if(ua.search("Android") >= 0){
				result.platform = "Android";
				result.name="Android";
			} else {
				result.platform = "LINUX";
			}
		} else if (tp == "iPhone Simulator") {
			result.platform = "iOS";
			result.name="iPhone Simulator";
		} else if (tp == "iPhone") {
			result.platform = "iOS";
			result.name="iPhone";
		} else if (tp == "iPad") {
			result.platform = "iOS";
			result.name="iPad";
		} else if (tp == "iPod") {
			result.platform = "iOS";
			result.name="iPod";
		} else {
			result.platform = "UNKNOWN";
		}
		
		// version, bit
		if(result.platform == "WINDOWS"){
			if(ua.indexOf("Windows NT 5.1") != -1) {result.version="5.1"; result.name="XP";}
			else if(ua.indexOf("Windows NT 5.2") != -1) {result.version="5.2"; result.name="XP";}
			else if(ua.indexOf("Windows NT 6.0") != -1) {result.version="6.0"; result.name="VISTA";}
			else if(ua.indexOf("Windows NT 6.1") != -1) {result.version="6.1"; result.name="7";}
			else if(ua.indexOf("Windows NT 6.2") != -1) {result.version="6.2"; result.name="8";}
			else if(ua.indexOf("Windows NT 6.3") != -1) {result.version="6.3"; result.name="8.1";}
			else if(ua.indexOf("Windows NT 10.0") != -1) {result.version="10.0"; result.name="10";}
			else if(ua.indexOf("Windows NT") != -1){
				result.version="UNKNOWN"; result.name="UNKNOWN";
			} else {
				result.version="UNKNOWN"; result.name="UNKNOWN";
			}
			
			if(ua.indexOf("WOW64") != -1 || ua.indexOf("Win64") != -1) result.bit="64";
			else result.bit="32";
			
		} else if(result.platform == "MACOSX"){
			if((ua.indexOf("Mac OS X 10_5") || ua.indexOf("Mac OS X 10.5")) != -1) {result.version="10.5"; result.name="Leopard";}
			else if((ua.indexOf("Mac OS X 10_6") || ua.indexOf("Mac OS X 10.6")) != -1) {result.version="10.6"; result.name="Snow Leopard";}
			else if((ua.indexOf("Mac OS X 10_7") || ua.indexOf("Mac OS X 10.7")) != -1) {result.version="10.7"; result.name="Lion";}
			else if((ua.indexOf("Mac OS X 10_8") || ua.indexOf("Mac OS X 10.8")) != -1) {result.version="10.8"; result.name="Mountain Lion";}
			else if((ua.indexOf("Mac OS X 10_9") || ua.indexOf("Mac OS X 10.9")) != -1) {result.version="10.9"; result.name="Mavericks";}
			else if((ua.indexOf("Mac OS X 10_10") || ua.indexOf("Mac OS X 10.10")) != -1) {result.version="10.10"; result.name="Yosemite";}
			else if((ua.indexOf("Mac OS X 10_11") || ua.indexOf("Mac OS X 10.11")) != -1) {result.version="10.11"; result.name="El Capitan";}
			else if((ua.indexOf("Mac OS X 10_12") || ua.indexOf("Mac OS X 10.12")) != -1) {result.version="10.12"; result.name="Sierra";}
			else if(ua.indexOf("Mac OS X 10") != -1){
				result.version="10.99"; result.name="NewVersion";
			} else {
				result.version="UNKNOWN"; result.name="UNKNOWN";
			}
			result.bit = "64";
		} else if(result.platform == "LINUX"){
			result.version="UNKNOWN"; result.name="UNKNOWN";
		} else {
			result.version="UNKNOWN"; result.name="UNKNOWN";
		}
		
		//exlog("BROSWER_UTIL.getOSInfo.result", result);
		return result;
	},
	isWin : function() {
		var OSInfo = BROSWER_CONST.OSInfo.platform;
		if(!OSInfo) OSInfo = BROSWER_UTIL.getOSInfo().platform;
		if (OSInfo == "WINDOWS") return true;
		return false;
	},
	isMac : function() {
		var OSInfo = BROSWER_CONST.OSInfo.platform;
		if(!OSInfo) OSInfo = BROSWER_UTIL.getOSInfo().platform;
		if (OSInfo == "MACOSX") return true;
		return false;
	},
	isLinux : function() {
		var OSInfo = BROSWER_CONST.OSInfo.platform;
		if(!OSInfo) OSInfo = BROSWER_UTIL.getOSInfo().platform;
		if (OSInfo == "LINUX") return true;
		return false;
	},
	isMobile : function() {
		var OSInfo = BROSWER_CONST.OSInfo.platform;
		if(!OSInfo) OSInfo = BROSWER_UTIL.getOSInfo().platform;
		if (OSInfo == "iOS" || OSInfo == "Android" || OSInfo == "Windows Phone") return true;
		return false;
	},
	getBrowserInfo : function(){
		var
			tp = navigator.platform,
			N= navigator.appName,
			ua= navigator.userAgent,
			tem;
		var result, M;
		
		//exlog("appName", N);
		//exlog("userAgent", ua);
		
		// if Edge
		M = ua.match(/(edge)\/?\s*(\.?\d+(\.\d+)*)/i);
		M = M ? {"browser":"Edge", "version":M[2]} : M;
		
		// if opera
		if(!M){
			M = ua.match(/(opera|opr)\/?\s*(\.?\d+(\.\d+)*)/i);
			if(M && (tem = ua.match(/version\/([\.\d]+)/i)) != null) M[2] = tem[1];
			M = M ? {"browser":"Opera", "version":M[2]} : M;
		}
		
		// if IE7 under
		/**
		if(!M) {
			M = ua.match(/MSIE ([67].\d+)/);
			if(M) M = {"browser":"MSIE", "version":M[1]};
		}
		**/
		// others
		if(!M) {
			M = ua.match(/(msie|trident|chrome|safari|firefox)\/?\s*(\.?\d+(\.\d+)*)/i);
			if(M){
				if((tem = ua.match(/rv:([\d]+)/)) != null) {
					M[2] = tem[1];
				} else if((tem = ua.match(/version\/([\.\d]+)/i)) != null) {
					M[2] = tem[1];
				}
				if(M[1] == "Trident") M[1] = "MSIE";
				M = M? {"browser":M[1], "version":M[2]} : {"browser":N, "version1":navigator.appVersion,"other":'-?'};
			}
		}
		
		if(!M){
			if(typeof Proxy){
				M = {"browser":"Edge", "version":""};
			}
		}
		
		if(!M){
			return {"browser":"UNDEFINED", "version":""};
		}
		
		if(M.version){
			var verArr = (M.version).split(".");
			M.version = verArr[0];
		}
		
		// bit
		if(tp){
			if(tp.toLowerCase().indexOf("win64") != -1){
				M.bit = "64";
			} else if (tp.toLowerCase().indexOf("win32") != -1){
				M.bit = "32";
			} else {
				M.bit = "";
			}
		}
		
		result = M;
		//exlog("CrossEXUtil.getBrowserInfo", result);
		return result;
	},
	getBrowserVer : function() {
		var browserInfo = BROSWER_CONST.browserInfo;
		if(!browserInfo) browserInfo = BROSWER_UTIL.getBrowserInfo();
		return browserInfo.version;
	},
	getBrowserBit : function() {
		var browserInfo = BROSWER_CONST.browserInfo;
		if(!browserInfo) browserInfo = BROSWER_UTIL.getBrowserInfo();
		return browserInfo.bit;
	},
	isIE : function() {
		var browserInfo = BROSWER_CONST.browserInfo;
		if(!browserInfo) browserInfo = BROSWER_UTIL.getBrowserInfo();
		if(browserInfo.browser.toLowerCase().indexOf("msie") != -1) {
			return true;
		} else {
			return false;
		}
	},
	isEdge : function() {
		var browserInfo = BROSWER_CONST.browserInfo;
		if(!browserInfo) browserInfo = BROSWER_UTIL.getBrowserInfo();
		if(browserInfo.browser.toLowerCase().indexOf("edge") != -1) {
			return true;
		} else {
			return false;
		}
	},
	isChrome : function() {
		// Chrome 1+
		//return !!window.chrome;
		var browserInfo = BROSWER_CONST.browserInfo;
		if(!browserInfo) browserInfo = BROSWER_UTIL.getBrowserInfo();
		if(browserInfo.browser.toLowerCase().indexOf("chrome") != -1) {
			return true;
		} else {
			return false;
		}
	},
	isFirefox : function() {
		// Firefox 1.0+
		//return typeof InstallTrigger !== 'undefined';
		var browserInfo = BROSWER_CONST.browserInfo;
		if(!browserInfo) browserInfo = BROSWER_UTIL.getBrowserInfo();
		if(browserInfo.browser.toLowerCase().indexOf("firefox") != -1) {
			return true;
		} else {
			return false;
		}
	},
	isOpera : function() {
		// Opera 8.0+ (UA detection to detect Blink/v8-powered Opera)
		//return !!window.opera || navigator.userAgent.indexOf('Opera') >= 0  || navigator.userAgent.indexOf('OPR') >= 0;
		var browserInfo = BROSWER_CONST.browserInfo;
		if(!browserInfo) browserInfo = BROSWER_UTIL.getBrowserInfo();
		if(browserInfo.browser.toLowerCase().indexOf("opera") != -1) {
			return true;
		} else {
			return false;
		}
	},
	isSafari : function() {
		// At least Safari 3+: "[object HTMLElementConstructor]"
		//return Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
		var browserInfo = BROSWER_CONST.browserInfo;
		if(!browserInfo) browserInfo = BROSWER_UTIL.getBrowserInfo();
		if((browserInfo.browser).toLowerCase().indexOf("safari") != -1) {
			return true;
		} else {
			return false;
		}
	},
	typeEX : function() {
		if (BROSWER_UTIL.isWin() && BROSWER_UTIL.isIE()) return true;
		return false;
	},
	typeEdge : function() {
		if (BROSWER_UTIL.isWin() && BROSWER_UTIL.isEdge()) return true;
		return false;
	},
	typeExtension : function() {
		if (
			(BROSWER_UTIL.isWin() || BROSWER_UTIL.isMac() || BROSWER_UTIL.isLinux()) &&
			(BROSWER_UTIL.isChrome() || BROSWER_UTIL.isFirefox() || (BROSWER_UTIL.isOpera() && BROSWER_UTIL.getBrowserVer() > 26))
		) return true;
		return false;
	},
	typePlugin : function() {
		if ((BROSWER_UTIL.isWin() || BROSWER_UTIL.isMac()) && (BROSWER_UTIL.isSafari())) return true;
		return false;
	},
	chkOS : function(localOS, reqOS){
		//exlog("_UTIL.chkOS.localOS", localOS);
		//exlog("_UTIL.chkOS.reqOS", reqOS);
		var os = localOS.platform.toUpperCase();
		var ver = localOS.version;
		if(os == "WINDOWS" || os == "MACOSX" || os == "LINUX"){
			var reqVer = eval("reqOS." + os);
			if(reqVer){
				if(reqVer == "PASS" || reqVer == "ALL"){
					return true;
				} else if(reqVer == "NO"){
					return false;
				} else {
					if(ver == "UNKNOWN") return false;
					if(this.diffVersionOS(ver, reqVer)){
						return true;
					} else {
						if(this.isWin() && this.isSafari()){
							// windows safari는 win8 이상은 모두 6.2로 표시
							if(ver == "6.2" && (reqVer == "6.2" || reqVer == "6.3" || reqVer == "10.0")){
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	},
	chkBrowser : function(localBrowser, reqBrowser){
		//exlog("_UTIL.chkBrowser.localBrowser", localBrowser);
		//exlog("_UTIL.chkBrowser.reqBrowser", reqBrowser);
		var browser = localBrowser.browser;
		var ver = parseInt(localBrowser.version);
		
		var reqVer = eval("reqBrowser." + browser.toUpperCase());
		if(!reqVer){
			if(this.isWin() && this.isSafari()){
				reqVer = reqBrowser.SAFARI_WIN;
			} else if(this.isMac() && this.isSafari()){
				reqVer = reqBrowser.SAFARI_MAC;
			} else {
				return false;
			}
		}
		
		if(reqVer){
			if(reqVer == "PASS" || reqVer == "ALL"){
				return true;
			} else if(reqVer == "NO"){
				return false;
			} else {
				reqVer = parseInt(reqVer);
				if(ver >= reqVer){
					return true;
				}
			}
		}
		return false;
	},
	createId : function() {
		//var id = new Date().getTime() + "_" + Math.floor(Math.random() * 10000)+1;
		var id = new Date().getTime() + "_" + BROSWER_UTIL.random();
		//exlog("BROSWER_UTIL.createId.id", id);
		return id;
	},
	/**
	 * true : 기존 설치된 모듈이 버전 더 높거나 같음
	 * false : 기존 설치된 모듈이 버전이 낮음. 업그레이드가 필요함.
	 */
	diffVersion : function( curVersion, svrVersion ) {
		
		//exlog("_UTIL.diffVersion.client version", curVersion);
		//exlog("_UTIL.diffVersion.server version", svrVersion);
	    var index;
	    try {
	    	index = curVersion.indexOf('version:', 0);
	    } catch (e){
	    	return false;
	    }
	    
	    if(index >= 0) {
	        curVersion = curVersion.substring(index + 8, curVersion.length);
	        var arrayOldVersion = curVersion.split('.');
	        if(arrayOldVersion.length < 4) arrayOldVersion = curVersion.split(',');
	        if(arrayOldVersion.length < 4) return false;
	        var arrayNewVersion = svrVersion.split('.');

	        for(var i = 0; i < 4; i++) {
	        	if (parseInt(arrayOldVersion[i], 10) > parseInt(arrayNewVersion[i], 10)) {
	        		return true;
	        	} else if (parseInt(arrayOldVersion[i], 10) < parseInt(arrayNewVersion[i], 10)) {
	        		return false;
	        	}
	        }
	        return true;
	    } else {
	        var arrayOldVersion = curVersion.split('.');
	        if(arrayOldVersion.length < 4) arrayOldVersion = curVersion.split(',');
	        if(arrayOldVersion.length < 4) return false;	        
	        var arrayNewVersion = svrVersion.split('.');
	        
	        for(var i = 0; i < 4; i++) {
	        	if (parseInt(arrayOldVersion[i], 10) > parseInt(arrayNewVersion[i], 10)) {
	        		return true;
	        	} else if (parseInt(arrayOldVersion[i], 10) < parseInt(arrayNewVersion[i], 10)) {
	        		return false;
	        	}
	        }
	        return true;
	    }
	},
	diffVersionOS : function( curVersion, svrVersion ){
        var arrayOldVersion = curVersion.split('.');
        var arrayNewVersion = svrVersion.split('.');
        if(isNaN(parseInt(arrayOldVersion[0], 10))) return false;
        for(var i = 0; i < arrayNewVersion.length; i++) {
        	if (parseInt(arrayOldVersion[i], 10) > parseInt(arrayNewVersion[i], 10)) {
        		return true;
        	} else if (parseInt(arrayOldVersion[i], 10) < parseInt(arrayNewVersion[i], 10)) {
        		return false;
        	}
        }
        return true;
	},
	chkCrossEXDiv : function() {
		if(BROSWER_UTIL.typeEX()){
			// div, iframe, form, script name _CONST set...
			BROSWER_CONST.exDivName = "crossexDiv";
			BROSWER_CONST.exIframeName = "crossexIfr";
			BROSWER_CONST.exScriptName = "crossexScr";
			BROSWER_CONST.exFormName = "__CROSSEX_FORM__";
			BROSWER_CONST.exFormDataName = "__CROSSEX_DATA__";
			
			var chk = document.getElementById(BROSWER_CONST.exDivName);
			if(!chk) {
				var exDiv = document.createElement("div");
				exDiv.id = BROSWER_CONST.exDivName;
				exDiv.style.display = "none";
				
				if(document.body) {
					document.body.appendChild(exDiv);
				} else {
					exalert("_UTIL.chkCrossEXDiv", "body 태그를 생성해 주십시오");
					return;
				}
				
				var exIframe = "<iframe ";
				exIframe += "name='" + BROSWER_CONST.exIframeName + "' ";
				exIframe += "id='" + BROSWER_CONST.exIframeName + "' ";
				exIframe += "src='" + BROSWER_CONST.blankPath + "' ";
				exIframe += "width=0 height=0 border=0";
				exIframe += "></iframe>";
				chk = document.getElementById(BROSWER_CONST.exDivName);
				chk.innerHTML = exIframe;
				
				var exForm = document.createElement("form");
				exForm.method = "POST";
				exForm.id = BROSWER_CONST.exFormName;
				exForm.name = BROSWER_CONST.exFormName;
				
				var exNode = document.createElement("input");
				exNode.type = "hidden";
				exNode.id = BROSWER_CONST.exFormDataName;
				exNode.name = BROSWER_CONST.exFormDataName;
				
				exForm.appendChild(exNode);
				exDiv.appendChild(exForm);
			}
		}
		return;
	},
	loadScript : function( url ) {
		
		var newScript = document.createElement("script");
		newScript.id = BROSWER_CONST.exScriptName;
		newScript.type = "text/javascript";
		if(newScript.readyState) { // IE8 under
			newScript.onreadystatechange = function() {
				exlog("_UTIL.loadScript.readyState", newScript.readyState);
				if (newScript.readyState == 'loading' || newScript.readyState == 'loaded') {
					newScript.onreadystatechange = null;
					exlog("_UTIL.loadScript", "loadScript load error");
					//exalert("_UTIL.loadScript", "loadScript load error");
				}
			};
		} else {
			newScript.onerror = function() {
				exlog("_UTIL.loadScript", "loadScript load error");
				//exalert("_UTIL.loadScript", "loadScript load error");
			};
		}
		
		try {
			newScript.src = url;
		} catch (e) {
			exlog("_UTIL.loadscript", "LoadScript not https load error");
			//exalert("_UTIL.loadScript", "LoadScript not https load error");
		}
		//exlog("BROSWER_UTIL.loadScript", url);
		//document.getElementsByTagName("head")[0].appendChild(newScript);
		//window[BROSWER_CONST.exDivName].appendChild(newScript);
		eval(BROSWER_CONST.exDivName).appendChild(newScript);
	},
	random : function(){
		try{
			if(!window['_ex_m_w']) window['_ex_m_w'] = 123456789;
			if(!window['_ex_m_z']) window['_ex_m_z'] = 987654321;
			if(!window['_ex_mask']) window['_ex_mask'] = 0xffffffff;
			
			_ex_m_z = (36969 * (_ex_m_z & 65535) + (_ex_m_z >> 16)) & _ex_mask;
			_ex_m_w = (18000 * (_ex_m_w & 65535) + (_ex_m_w >> 16)) & _ex_mask;
		    var result = ((_ex_m_z << 16) + _ex_m_w) & _ex_mask;
		    result /= 4294967296;
		    return parseInt((result + 0.5) * 1000000).toString();
		} catch(e){
			return '';
		}
	}
};

BROSWER_CONST.OSInfo = BROSWER_UTIL.getOSInfo();
